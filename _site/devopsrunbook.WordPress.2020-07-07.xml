<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2020-07-07 22:31"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>devops runbook</title>
<link>https://devopsrunbook.wordpress.com</link>
<description>Bob's notes</description>
<pubDate>Tue, 07 Jul 2020 22:31:10 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://devopsrunbook.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>bobmclarke915800472</wp:author_login>
  <wp:author_email>bob.mclarke@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[Bob Clarke]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:term>
  <wp:term_id>46713247</wp:term_id>
  <wp:term_taxonomy>nav_menu</wp:term_taxonomy>
  <wp:term_slug>foo</wp:term_slug>
  <wp:term_name><![CDATA[foo]]></wp:term_name>
</wp:term>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s0.wp.com/i/buttonw-com.png</url>
		<title>devops runbook</title>
		<link>https://devopsrunbook.wordpress.com</link>
	</image>
	<item>
  <title>Kubernetes device mapper out of space - pod stuck in ContainerCreating state</title>
  <link>https://devopsrunbook.wordpress.com/2018/03/15/kubernetes-device-mapper-out-of-space-pod-stuck-in-containercreating-state/</link>
  <pubDate>Thu, 15 Mar 2018 17:59:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/03/15/kubernetes-device-mapper-out-of-space-pod-stuck-in-containercreating-state/</guid>
  <description/>
  <content:encoded><![CDATA[If you have a pod in <strong>ContainerCreating</strong> state, follow these steps to held determine the issue:
<ul>
	<li>carry out a wide pod listing (kubectl get pods -o wide) to determine which node your erroneous pod is hosted on</li>
	<li>ssh to the node in question</li>
	<li>run (as root)</li>
</ul>
<pre>journalctl --unit kubelet --no-pager | grep &lt;pod name&gt;</pre>
In this particular case the following message was present
<pre>Mar 15 12:35:49 jupiter.stack1.com kubelet[3146]: 
E0315 12:35:49.215454    3146 pod_workers.go:186] 
Error syncing pod ec706dba-2847-11e8-b8d8-0676d5f18210 ("kube-proxy-nwp6t_kube-system(ec706dba-2847-11e8-b8d8-0676d5f18210)"), 
skipping: failed to "CreatePodSandbox" for "kube-proxy-nwp6t_kube-system(ec706dba-2847-11e8-b8d8-0676d5f18210)" 
with CreatePodSandboxError: "CreatePodSandbox for pod 
\"kube-proxy-nwp6t_kube-system(ec706dba-2847-11e8-b8d8-0676d5f18210)
\" failed: rpc error: code = Unknown desc = failed to create a sandbox
 for pod \"kube-proxy-nwp6t\": Error response from daemon: devmapper: 
Thin Pool has 152128 free data blocks which is less than minimum required 163840 free data blocks. 
Create more free space in thin pool or use dm.min_free_space option to change behavior"</pre>
This is stating that the Docker device mapper is out of space

(as set in <span style="color:#008000;"><strong>/etc/sysconfig/docker</strong></span> via option <strong><span style="color:#008000;">--storage-opt dm.loopdatasize=40G</span></strong>) .
This can usually be resolved by removing containers that have exited, dangling images and dangling volumes using the following steps:

&nbsp;

Cleanup exited processes:
<pre>docker rm $(docker ps -q -f status=exited)</pre>
Cleanup dangling volumes:
<pre>docker volume rm $(docker volume ls -qf dangling=true)</pre>
Cleanup dangling images:
<pre>docker rmi $(docker images --filter "dangling=true" -q --no-trunc)</pre>
Now run <span style="color:#008000;"><strong>docker info</strong></span> to check your Device Mapper available space (meta and data)

&nbsp;

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>2018-03-15 17:59:00</wp:post_date>
  <wp:post_date_gmt>2018-03-15 17:59:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kubernetes-device-mapper-out-of-space-pod-stuck-in-containercreating-state</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="kubernetes"><![CDATA[kubernetes]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21246885706]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Hitting kube-proxy directly with curl to get container logs</title>
  <link>https://devopsrunbook.wordpress.com/2018/03/15/hitting-kube-proxy-directly-with-curl-to-get-container-logs/</link>
  <pubDate>Thu, 15 Mar 2018 17:54:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/03/15/hitting-kube-proxy-directly-with-curl-to-get-container-logs/</guid>
  <description/>
  <content:encoded><![CDATA[When you ask the API server to retrieve pod logs (i.e. kubectl logs , it does this be connecting to kube-proxy on port <span style="color:#008000;"><strong>10250</strong></span> (not quite sure where this is defined yet but will find out and update this post)  on the node hosting the pod.  You can check this manually by ssh'ing to the node as follows and using curl as follows:
<pre>curl -k https://&lt;k8s node IP address&gt;:10250/containerLogs/&lt;pod namespace&gt;/&lt;pod name&gt;/&lt;container name&gt;</pre>
The <span style="color:#008000;"><strong>no route to host message</strong></span> is misleading because it implies that you have a IP routing problem, which is not the case, as you'll notice if you ping the host.

The error is actually caused by the kube-proxy port being blocked by firewalld on the target hosting the pod in question. Not sure why the no route to host message is given because this is obviously not a routing issue. Allowing port 10250 on the host in question resolved the issue when I experienced this problem.
re-running the curl command above will show you the logs from the container in question (no authentication needed)

&nbsp;

NOTE: Make sure you don't have HTTP_PROXY and/or HTTPS_PROXY env vars set on the box you're running curl from]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>13</wp:post_id>
  <wp:post_date>2018-03-15 17:54:00</wp:post_date>
  <wp:post_date_gmt>2018-03-15 17:54:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hitting-kube-proxy-directly-with-curl-to-get-container-logs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="kubernetes"><![CDATA[kubernetes]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21247049829]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Kubernetes Ingress de-mystified</title>
  <link>https://devopsrunbook.wordpress.com/2018/03/04/kubernetes-ingress-de-mysified/</link>
  <pubDate>Sun, 04 Mar 2018 22:52:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/03/04/kubernetes-ingress-de-mysified/</guid>
  <description/>
  <content:encoded><![CDATA[Just finished a weekend of being totally confused about k8s ingress. I'm glad to say that I finally managed (using my OCD powers and lots of snacks/coffee) to work out what's going on. Here's what I learned. (NOTE: I'm doing this on Minikube with no add-ons)

The confusion I experienced was made worse by several guides that skipped over the key detail that was confusing me, i.e the ingress-controller, because they either:
- Assumed I was running on GKE which handles the ingress-controller automatically
- Assumed I had enabled ingress in Minikube as an add-on which also handles the ingress-controller automatically

Now, call me old fashioned, but when I'm learning something I like to do everything myself so that I fully understand every piece.

Oddly enough, a couple of guides were plain wrong and exposed the services they were publishing via ingress as NodePort. This really confused me because the ingress controller is inside the cluster, along with the services it's routing to and therefore can contact the services "natively" on their ClusterIP. The point here (and this sounds obvious to me now but before the penny dropped it wasn't) is that <b>the only service that needs to be exposed to the outside world when using ingress is the service that sits in front of the ingress controller itself</b>.

The aim of this guide is to:
- Help me not forget what I learned (always good to write things down)
- Maybe help other out people that might find ingress confusing.

So here goes...

The diagram below set's out the target system:

<img class="alignnone size-full wp-image-126" src="https://devopsrunbook.files.wordpress.com/2018/03/k8s-ingress-2.png" alt="k8s ingress (2)" width="962" height="803" />
Here's the yaml for each component, starting from the top down:
<pre class="code"><b>ingress-controller-service.yaml</b>
apiVersion: v1
kind: Service
metadata:
  name: ingress-controller
spec:
  type: NodePort
  ports:
  - name: http
    port: 80
    targetPort: http
    nodePort: 32000
  selector:
    app: ingress-controller</pre>
<pre class="code"><b>ingress-controller-deployment.yaml</b>
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ingress-controller
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-controller
  template:
    metadata:
      labels:
        app: ingress-controller
    spec:
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.11.0
          args:
            - /nginx-ingress-controller
            - --default-backend-service=$(POD_NAMESPACE)/default-backend
            - --annotations-prefix=nginx.ingress.kubernetes.io
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
          - name: http
            containerPort: 80</pre>
An interesting point to note from the yaml below is that I've set the host to minikube. I originally left this blank which means that any hostname or IP specified in the URL would be acceptable. however when I did this the nginx controller kept trying to redirect me (via a 308) to https. I googled around a bit and found out that this is expected behavior for the nginx controller and that specifying a host stops this from happening. So I tried putting my minikube IP address in, kubectl complained about this stating that hostnames and not IP's had to be used in the ingress host field. This being the case I just placed an entry in my local /etc/hosts
<pre class="code"><b>ingress-resource.yaml</b>
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: cluster-ingress-rules
spec:
  rules:
  - host: minikube
    http:
      paths:
      - path: /hello-world
        backend:
          serviceName: hello-world
          servicePort: 8080</pre>
<pre class="code"><b>hello-world-service.yaml</b>
apiVersion: v1
kind: Service
metadata:
  name: hello-world
  labels:
    run: hello-world
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    run: hello-world</pre>
<pre class="code"><b>hello-world-deployment.yaml</b>
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: hello-world
  labels:
    run: hello-world
spec:
  replicas: 1
  selector:
    matchLabels:
      run: hello-world
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: hello-world
    spec:
      containers:
      - image: gcr.io/google-samples/node-hello:1.0
        name: hello-world
        ports:
        - containerPort: 8080</pre>
<pre class="code"><b>default-backend-service.yaml</b>
apiVersion: v1
kind: Service
metadata:
  name: default-backend
  labels:
    app: default-backend
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: default-backend</pre>
<pre class="code"><b>default-backend-deployment.yaml</b>
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: default-backend
  labels:
    app: default-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: default-backend
  template:
    metadata:
      labels:
        app: default-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: default-backend
        image: gcr.io/google_containers/defaultbackend:1.4
        ports:
        - containerPort: 8080</pre>
&nbsp;

<b>Applying this lot to my cluster results in the following:</b>
<pre>----- Ingress ------------------------------------------------------------------
NAME                    HOSTS      ADDRESS   PORTS     AGE
cluster-ingress-rules   minikube             80        20m

----- Services -----------------------------------------------------------------
NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
default-backend      ClusterIP   10.100.69.250   &lt;none&gt;        80/TCP         20m
hello-world          ClusterIP   10.110.199.3    &lt;none&gt;        8080/TCP       20m
<b>ingress-controller   NodePort    10.111.99.142   &lt;none&gt;        80:32000/TCP   20m</b>
kubernetes           ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        16d

----- Deployments --------------------------------------------------------------
NAME                 DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
default-backend      1         1         1            1           20m
hello-world          1         1         1            1           20m
ingress-controller   1         1         1            1           20m

----- Pods ---------------------------------------------------------------------
NAME                                  READY     STATUS    RESTARTS   AGE
default-backend-79f984dc75-2bbbf      1/1       Running   0          20m
hello-world-554998f545-wjj49          1/1       Running   0          20m
ingress-controller-5cddb96544-2k9w7   1/1       Running   0          20m</pre>
As can be seen from the above, the only service exposed to the outside world is the <b>ingress-controller</b> service

Running <b>minikube service list</b> produces the following result:
<pre>|-------------|----------------------|-----------------------------|
|  NAMESPACE  |         NAME         |             URL             |
|-------------|----------------------|-----------------------------|
| default     | default-backend      | No node port                |
| default     | hello-world          | No node port                |
| <b>default     | ingress-controller   | http://192.168.99.100:32000</b> |
| default     | kubernetes           | No node port                |
| kube-system | kube-dns             | No node port                |
| kube-system | kubernetes-dashboard | http://192.168.99.100:30000 |
| kube-system | tiller-deploy        | No node port                |
|-------------|----------------------|-----------------------------|</pre>
and putting http://minikube:32000/hello-world into a browser results in the message <b>Hello Kubernetes!</b>

And there you have it, hopefully I haven't missed anything.

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>14</wp:post_id>
  <wp:post_date>2018-03-04 22:52:00</wp:post_date>
  <wp:post_date_gmt>2018-03-04 22:52:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kubernetes-ingress-de-mysified</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="kubernetes"><![CDATA[kubernetes]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21122194044]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1</wp:comment_id>
    <wp:comment_author><![CDATA[Rob Mold]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.blogger.com/profile/10666878196249616155</wp:comment_author_url>
    <wp:comment_author_IP/>
    <wp:comment_date>2018-03-04 23:54:35</wp:comment_date>
    <wp:comment_date_gmt>2018-03-04 23:54:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I posted to an old post before. Hi Bob how are you doing.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>2</wp:comment_id>
    <wp:comment_author><![CDATA[Bob Clarke]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.blogger.com/profile/02220349064820348861</wp:comment_author_url>
    <wp:comment_author_IP/>
    <wp:comment_date>2018-03-05 09:45:14</wp:comment_date>
    <wp:comment_date_gmt>2018-03-05 09:45:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Rob, Good to hear from you, how&#039;s things??drop me an email on bobmclarke@gmail.comSpeak to you soonBob]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>image test</title>
  <link>https://devopsrunbook.wordpress.com/?p=15</link>
  <pubDate>Sun, 04 Mar 2018 16:30:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=15</guid>
  <description/>
  <content:encoded><![CDATA[pre { margin:.4em .4em .4em .4em ; padding: 0; text-align:left } pre.text{          color:#000000;          background: #ffffff;          word-wrap:normal;          overflow:auto;          font-size: 15px;          font-family:verdana;          white-space: pre-wrap;          white-space: -moz-pre-wrap;          white-space: -pre-wrap;         white-space: -o-pre-wrap; } pre.code{         background: #f8f8f8;         overflow:auto;         width:auto;         border:solid orange;         border-width:.05em .05em .05em .05em;         padding:.4em .4em .4em .9em;          margin:.4em .4em 30px .4em;          font-size: 16px;         font-family:verdana;         word-wrap:break-word;         overflow:auto;         white-space: pre-wrap;         white-space: -moz-pre-wrap;         white-space: -pre-wrap;         white-space: -o-pre-wrap; }    <br /><div class="separator" style="clear:both;text-align:center;"><a href="https://www.blogger.com/blogger.g?blogID=4054562715869801601" style="margin-left:1em;margin-right:1em;"><img /></a></div><pre class="text"><a href="https://www.blogger.com/blogger.g?blogID=4054562715869801601" style="clear:left;float:left;margin-bottom:1em;margin-right:1em;"></a>This is an image<br /></pre><br />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>15</wp:post_id>
  <wp:post_date>2018-03-04 16:30:00</wp:post_date>
  <wp:post_date_gmt>2018-03-04 16:30:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Kubernetes - serviceaccount authentication tokens</title>
  <link>https://devopsrunbook.wordpress.com/2018/02/28/kubernetes-serviceaccount-authentication-tokens/</link>
  <pubDate>Wed, 28 Feb 2018 22:06:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/02/28/kubernetes-serviceaccount-authentication-tokens/</guid>
  <description/>
  <content:encoded><![CDATA[When pods communicate with the API server, they use a service account to authenticate.
The token for this is defined in a secret, which is mounted as a volume into the pod in question. The token is signed by the key specified by the API servers <b>--service-account-key-file</b> property

You can test this token by making a request to the API server with curl as follows:
<pre class="code">curl -H  “Authorization: Bearer &lt;token&gt;"  https://&lt;master ip addr&gt;:6443/api/v1/namespaces/&lt;namespace&gt;/pods/&lt;pod name&gt;</pre>
You can derive the token from the relevant secret as follows:
<pre><strong>kubectl describe secrets -n kube-system</strong>
Name:         <span style="color:blue;">default-token-jvrkf</span>
Namespace:    kube-system
Labels:       
Annotations:  kubernetes.io/service-account.name=default
              kubernetes.io/service-account.uid=ba8add2d-12ab-11e8-9719-080027dd95a3

Type: kubernetes.io/service-account-token
Data
====
ca.crt: 1066 bytes
namespace: 11 bytes
token: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW
50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVy
bmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLWp2cmtmIiwia3ViZX
JuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5l
dGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJiYThhZGQyZC0xMmFiLTExZTgtOT
cxOS0wODAwMjdkZDk1YTMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGVmYXVs
dCJ9.JYVNgnSNO-Gs4zuqjZHOQs1e4RG31c_trE5AcJXqlexM5On0SriWjb-qICS2o5_M0jNmSKED67lfAomoC
sKOk7a4zlAdpkc4eVWxMXEaWemu6yxQAIcJjiaBgEpOm38FMQJKEsb1D3kdD0W0HD1MNcgY0LXxyXuWv7NToqG
xbYn7QJqrEEFTM5qEx5IAAA7YeWOkXqQ35Vtg1Co1u-Ilw2Cr1GPtmCazCL0t8bpP4oi7qDr98lYmWNMo8KcPZ
pIBoS9Cg0bX3gONOE3Fga6Aa0e6VxLPy9VyXdezXvNtsmMtW-ryJ8fvplap2wj2JPFWCEO26DIXQSx8OX_h3ds
_ug

</pre>
&nbsp;

Here's an example curl request:
<pre class="code">curl -k -H "Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLWp2cmtmIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJiYThhZGQyZC0xMmFiLTExZTgtOTcxOS0wODAwMjdkZDk1YTMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGVmYXVsdCJ9.JYVNgnSNO-Gs4zuqjZHOQs1e4RG31c_trE5AcJXqlexM5On0SriWjb-qICS2o5_M0jNmSKED67lfAomoCsKOk7a4zlAdpkc4eVWxMXEaWemu6yxQAIcJjiaBgEpOm38FMQJKEsb1D3kdD0W0HD1MNcgY0LXxyXuWv7NToqGxbYn7QJqrEEFTM5qEx5IAAA7YeWOkXqQ35Vtg1Co1u-Ilw2Cr1GPtmCazCL0t8bpP4oi7qDr98lYmWNMo8KcPZpIBoS9Cg0bX3gONOE3Fga6Aa0e6VxLPy9VyXdezXvNtsmMtW-ryJ8fvplap2wj2JPFWCEO26DIXQSx8OX_h3ds_ug" https://192.168.99.100:8443/api/v1/namespaces/kube-system/pods/<b><span style="color:orange;">kube-dns-54cccfbdf8-xqgz6</span></b></pre>
You can see how the pod uses this token by running <b>kubectl describe pods <span style="background-color:white;"><span style="color:orange;">kube-dns-54cccfbdf8-xqgz6</span></span> -n kube-system</b> and checking the <b>Mounts</b> section in the output.
<pre>Mounts:
/kube-dns-config from kube-dns-config (rw)
/var/run/secrets/kubernetes.io/serviceaccount from <span style="color:blue;">default-token-jvrkf</span> (ro)</pre>
It's worth noting that if you run <b>kubectl get secrets -n kube-system -o yaml</b> as opposed to <b>kubectl describe secrets -n kube-system</b>, the token will be base64 encoded so you'll need to pipe it through <b>base64 --decode</b> before you copy and paste it into your curl command

If you regenerate your cluster certificates for any reason, you'll need to regenerate these tokens. To do this just delete the secrets with kubectl, new secrets will be generated automatically. However <b>(and this is really important and had me going for a while) </b> these secrets will have a <span style="color:red;">different name</span>, therefore your pods will still be trying to mount the old secrets. To resolve this you also need to delete the pods (e.g. kubectl delete pod ) -n kube-system . If the pods are managed by deployments (and this is why you should use deployments by the way) they will automatically be regenerated and will mount the new secrets automatically.

Your best friend by far in all of this is the command <b>journalctl -u kubelet -f. </b>If you have a pod stuck in ContainerCreating and therefore are not able to look at that it's container logs, simply log on the node in question and run <b>journalctl -u kubelet -f | grep </b> .. priceless tool<b> </b>

<strong><b>NOTE</b>: if you're using <b>Calico</b> networking, this new token will need to be set in <b>/etc/cni/net.d/10-calico.conf </b>which is in turn derived from the ConfigMap <b>calico-config</b>. If you edit the contents of this file directly, the changes will be overwritten by the contents of the calico-config ConfigMap at the next kubelet restart.</strong><b></b><b></b>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>16</wp:post_id>
  <wp:post_date>2018-02-28 22:06:00</wp:post_date>
  <wp:post_date_gmt>2018-02-28 22:06:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kubernetes-serviceaccount-authentication-tokens</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="calico"><![CDATA[calico]]></category>
  <category domain="post_tag" nicename="kubernetes"><![CDATA[kubernetes]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21205187229]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Kubernetes ConfigMaps</title>
  <link>https://devopsrunbook.wordpress.com/?p=17</link>
  <pubDate>Fri, 09 Feb 2018 12:19:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/02/09/kubernetes-configmaps/</guid>
  <description/>
  <content:encoded><![CDATA[Create a configMap:

kubectl create configmap <b>env-config</b> --from-literal=<b>ENV_VAR_1=FOO</b> --from-literal=<b>ENV_VAR_2=BAR</b>
<pre class="text"></pre>
&nbsp;
<pre class="code"></pre>
<pre class="text">you can view the result with</pre>
<pre class="code">kubectl get  configmap env-config -o yaml</pre>
<pre class="text">Create a pod to use this configMap</pre>
<pre class="code">apiVersion: v1
kind: Pod
metadata:
  name: test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh", "-c", "env" ]
      <b>envFrom:
      - configMapRef:
          name: env-config</b>
  restartPolicy: Never</pre>
<pre class="code">kubectl create -f test-pod.yaml</pre>
<pre class="text">This pod will print it's env and then exit. You can view the output as follows</pre>
<pre class="code">kubectl logs test-pod -c test-container</pre>
<pre class="text">You should see something like...</pre>
<pre class="code">KUBERNETES_PORT=tcp://10.96.0.1:443
KUBERNETES_SERVICE_PORT=443
HOSTNAME=test-pod
SHLVL=1
HOME=/root
EXAMPLE_SERVICE_PORT_8080_TCP_ADDR=10.100.105.233
EXAMPLE_SERVICE_SERVICE_HOST=10.100.105.233
EXAMPLE_SERVICE_PORT_8080_TCP_PORT=8080
<b>ENV_VAR_1=FOO</b>
<b>ENV_VAR_2=BAR</b>
EXAMPLE_SERVICE_PORT_8080_TCP_PROTO=tcp
KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
EXAMPLE_SERVICE_PORT=tcp://10.100.105.233:8080
EXAMPLE_SERVICE_SERVICE_PORT=8080
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
KUBERNETES_PORT_443_TCP_PORT=443
KUBERNETES_PORT_443_TCP_PROTO=tcp
EXAMPLE_SERVICE_PORT_8080_TCP=tcp://10.100.105.233:8080
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
PWD=/
KUBERNETES_SERVICE_HOST=10.96.0.1</pre>
&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>17</wp:post_id>
  <wp:post_date>2018-02-09 12:19:00</wp:post_date>
  <wp:post_date_gmt>2018-02-09 12:19:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kubernetes-configmaps</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="kubernetes"><![CDATA[kubernetes]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21122723896]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>3</wp:comment_id>
    <wp:comment_author><![CDATA[Rob Mold]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.blogger.com/profile/10666878196249616155</wp:comment_author_url>
    <wp:comment_author_IP/>
    <wp:comment_date>2018-03-02 12:46:54</wp:comment_date>
    <wp:comment_date_gmt>2018-03-02 12:46:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey Bob hope your well]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>ssh tunneling (localport)</title>
  <link>https://devopsrunbook.wordpress.com/2018/02/09/ssh-tunneling-localport/</link>
  <pubDate>Fri, 09 Feb 2018 10:04:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/02/09/ssh-tunneling-localport/</guid>
  <description/>
  <content:encoded><![CDATA[The syntax is:
<pre class="code">ssh  -L  local_port:target_host:target_port  bastion_host
</pre>
Forward port 2525 on your local machine to port 25 on mail.exmaple.net via bastion.stack1.com:
<pre class="code">ssh  -L  40000:ldap.stack1.com:389  bastion.stack1.com:389</pre>
As above but don't start a shell on the bastion (-N) and run ssh in the background (-f)
<pre>ssh -L 40000:ldap.stack1.com:389 bastion.stack1.com -N -f</pre>
Put a shortcut in .ssh/config:
<pre class="code">Host ldap-tunnel
    HostName bastion-host
    LocalForward local-port  target-host:target-port
    User user-on-bastion-host
    IdentityFile ~/.ssh/ private-key-for-user-on-bastion-host

Host ldap-tunnel
    HostName bastion.stack1.com
    LocalForward 40000 ldap.stack1.com:389
    User clarkeb
    IdentityFile ~/.ssh/clarkeb_rsa</pre>
If I now ran ssh ldap-tunnel -f -N I could connect my ldap client to port 40000 on my local machine and this would tunnel through to port 389 on ldap.stack1.com

<hr />

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>18</wp:post_id>
  <wp:post_date>2018-02-09 10:04:00</wp:post_date>
  <wp:post_date_gmt>2018-02-09 10:04:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ssh-tunneling-localport</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="proxy"><![CDATA[proxy]]></category>
  <category domain="post_tag" nicename="ssh"><![CDATA[ssh]]></category>
  <category domain="post_tag" nicename="tunneling"><![CDATA[tunneling]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21247511037]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>show progress when uploading with curl</title>
  <link>https://devopsrunbook.wordpress.com/2018/02/04/show-progress-when-uploading-with-curl/</link>
  <pubDate>Sun, 04 Feb 2018 15:14:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/02/04/show-progress-when-uploading-with-curl/</guid>
  <description/>
  <content:encoded><![CDATA[curl has a --progress-bar option, however it appears that STDOUT overwrites it's output. A workaround for this is to redirect STDOUT to /dev/null as shown in the following example:
<pre class="code">curl -v -u 'my_username:my_pass' --upload-file myfile.tar.gz \
  http://nexus.stack1.com/content/sites/binaries/golang/ --progress-bar  &gt; /dev/null</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>19</wp:post_id>
  <wp:post_date>2018-02-04 15:14:00</wp:post_date>
  <wp:post_date_gmt>2018-02-04 15:14:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>show-progress-when-uploading-with-curl</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="curl"><![CDATA[curl]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21247573206]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>programatically enable and disable individual crontab entries</title>
  <link>https://devopsrunbook.wordpress.com/2018/01/13/programatically-enable-and-disable-individual-crontab-entries/</link>
  <pubDate>Sat, 13 Jan 2018 17:57:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/01/13/programatically-enable-and-disable-individual-crontab-entries/</guid>
  <description/>
  <content:encoded><![CDATA[<div>

Running as root and using the user clarkeb as an example

To append:
<pre class="text">(crontab -u clarkeb -l 2&gt;&amp;1 | grep -v "no crontab" ;echo "*/5 * * * * perl /home/clarkeb/test1.pl") | crontab -u clarkeb –
(crontab -u clarkeb -l 2&gt;&amp;1 | grep -v "no crontab" ;echo "*/5 * * * * perl /home/clarkeb/test2.pl") | crontab -u clarkeb –
(crontab -u clarkeb -l 2&gt;&amp;1 | grep -v "no crontab" ;echo "*/5 * * * * perl /home/clarkeb/test3.pl") | crontab -u clarkeb –</pre>
To check:
<pre class="code">crontab -u clarkeb -l</pre>
</div>
To remove test1.pl only and leave test2.pl and test3.pl n place:
<div id="post-body-3552684385124813903" class="post-body entry-content">
<div>
<pre class="code">crontab -u clarkeb -l  2&gt;&amp;1 | grep -v "test1.pl" | crontab -u clarkeb –
</pre>
</div>
<div></div>
</div>
<div class="post-footer">

<hr />

</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>20</wp:post_id>
  <wp:post_date>2018-01-13 17:57:00</wp:post_date>
  <wp:post_date_gmt>2018-01-13 17:57:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>programatically-enable-and-disable-individual-crontab-entries</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="cron"><![CDATA[cron]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21247715890]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Remove whitespace from a string in bash</title>
  <link>https://devopsrunbook.wordpress.com/2018/01/13/remove-whitespace-from-a-string-in-bash/</link>
  <pubDate>Sat, 13 Jan 2018 17:39:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=21</guid>
  <description/>
  <content:encoded><![CDATA[If the file /etc/foo.props contained:
<pre>context-root= /app1 
http_port= 8080 
admin-port= 9090</pre>
... and you were using
<pre>http_port=$(cat /foo/props.conf | grep http-port | cut -d = -f 2</pre>
$http_port would end up being prefixed by whitespace, which would be a problem if you were using this to construct a URL in a script. To resolve this, you could use xargs as follows:
<pre>http_port=$(cat /etc/foo.props | grep http-port | cut -d = -f 2 | xargs)</pre>
&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>21</wp:post_id>
  <wp:post_date>2018-01-13 17:39:00</wp:post_date>
  <wp:post_date_gmt>2018-01-13 17:39:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>remove-whitespace-from-a-string-in-bash</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1536391487]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21919629323]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>An example splunk dashboard XML</title>
  <link>https://devopsrunbook.wordpress.com/2018/01/13/an-example-splunk-dashboard-xml/</link>
  <pubDate>Sat, 13 Jan 2018 17:06:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/01/13/an-example-splunk-dashboard-xml/</guid>
  <description/>
  <content:encoded><![CDATA[<pre>&lt;dashboard&gt;
  &lt;label&gt;My label&lt;/label&gt;
  &lt;description&gt;A description&lt;/description&gt;

  &lt;row&gt;
    &lt;panel&gt;
      &lt;title&gt;Datacentre 1&lt;/title&gt;
      &lt;table&gt;
        &lt;search&gt;

          &lt;query&gt;
            (host=jupiter ORhost=neptune)
            sourcetype=apache* source=*check_endpoints_info.log HTTP_STATUS_CODE: |
            rex field=_raw "TIMESTAMP:(?&amp;lt;TIMESTAMP&amp;gt;.+)\s+APP" |
            rex field=_raw "APP:(?&amp;lt;SERVICE&amp;gt;.+)\s+PORT" |
            rex field=_raw "CONTEXT ROOT:(?&amp;lt;CONTEXT_ROOT&amp;gt;.+)\s+GET" |
            rex field=_raw "\s+GET:\s+(?&amp;lt;URI&amp;gt;.+)\s+HTTP.+Host" |
            rex field=_raw "\s+HTTP_STATUS_CODE:\s+(?&amp;lt;HTTP_STATUS&amp;gt;\d+).+" |
            rex field=_raw "PORT:(?&amp;lt;PORT&amp;gt;.+)CONTEXT ROOT" |
            stats max(TIMESTAMP) as TIMESTAMP by host,SERVICE,URI,HTTP_STATUS |
            sort host
          &lt;/query&gt;
          
          &lt;earliest&gt;-210s@s&lt;/earliest&gt;
          &lt;latest&gt;now&lt;/latest&gt;
          &lt;refresh&gt;1m&lt;/refresh&gt;
          &lt;refreshType&gt;delay&lt;/refreshType&gt;
        
        &lt;/search&gt;

        &lt;option name="count"&gt;18&lt;/option&gt;
        &lt;option name="dataOverlayMode"&gt;none&lt;/option&gt;
        &lt;option name="drilldown"&gt;row&lt;/option&gt;
        &lt;option name="percentagesRow"&gt;false&lt;/option&gt;
        &lt;option name="rowNumbers"&gt;true&lt;/option&gt;
        &lt;option name="totalsRow"&gt;false&lt;/option&gt;
        &lt;option name="wrap"&gt;true&lt;/option&gt;
        
        &lt;format type="color" field="HTTP_STATUS"&gt;
          &lt;colorPalette type="map"&gt;{"200":#65A637,"404":#D93F3C,"500":#D93F3C,"503":#D93F3C}&lt;/colorPalette&gt;
        &lt;/format&gt;

      &lt;/table&gt;
    &lt;/panel&gt;

    &lt;panel&gt;
      &lt;title&gt;Datacentre 2&lt;/title&gt;
      &lt;table&gt;
        &lt;search&gt;

          &lt;query&gt;
            (host=mars OR host=venus)
            sourcetype=apache* source=*check_endpoints_info.log HTTP_STATUS_CODE: |
            rex field=_raw "TIMESTAMP:(?&amp;lt;TIMESTAMP&amp;gt;.+)\s+APP" |
            rex field=_raw "APP:(?&amp;lt;SERVICE&amp;gt;.+)\s+PORT" |
            rex field=_raw "CONTEXT ROOT:(?&amp;lt;CONTEXT_ROOT&amp;gt;.+)\s+GET" |
            rex field=_raw "\s+GET:\s+(?&amp;lt;URI&amp;gt;.+)\s+HTTP.+Host" |
            rex field=_raw "\s+HTTP_STATUS_CODE:\s+(?&amp;lt;HTTP_STATUS&amp;gt;\d+).+" |
            rex field=_raw "PORT:(?&amp;lt;PORT&amp;gt;.+)CONTEXT ROOT" |
            stats max(TIMESTAMP) as TIMESTAMP by host,SERVICE,URI,HTTP_STATUS |
            sort host
          &lt;/query&gt;

          &lt;earliest&gt;-4m@m&lt;/earliest&gt;
          &lt;latest&gt;now&lt;/latest&gt;
          &lt;refresh&gt;1m&lt;/refresh&gt;
          &lt;refreshType&gt;delay&lt;/refreshType&gt;

        &lt;/search&gt;

        &lt;option name="count"&gt;18&lt;/option&gt;
        &lt;option name="dataOverlayMode"&gt;none&lt;/option&gt;
        &lt;option name="drilldown"&gt;row&lt;/option&gt;
        &lt;option name="percentagesRow"&gt;false&lt;/option&gt;
        &lt;option name="rowNumbers"&gt;true&lt;/option&gt;
        &lt;option name="totalsRow"&gt;false&lt;/option&gt;
        &lt;option name="wrap"&gt;true&lt;/option&gt;
        &lt;format type="color" field="HTTP_STATUS"&gt;
          &lt;colorPalette type="map"&gt;{"200":#65A637,"404":#D93F3C,"500":#D93F3C,"503":#D93F3C}&lt;/colorPalette&gt;
        &lt;/format&gt;

      &lt;/table&gt;
    &lt;/panel&gt;
  &lt;/row&gt;
&lt;/dashboard&gt;</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>22</wp:post_id>
  <wp:post_date>2018-01-13 17:06:00</wp:post_date>
  <wp:post_date_gmt>2018-01-13 17:06:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>an-example-splunk-dashboard-xml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="splunk"><![CDATA[splunk]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21247800230]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>splunk regex</title>
  <link>https://devopsrunbook.wordpress.com/2018/01/13/splunk-regex/</link>
  <pubDate>Sat, 13 Jan 2018 15:02:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/01/13/splunk-regex/</guid>
  <description/>
  <content:encoded><![CDATA[The syntax is:
<pre class="code">rex field=<i>splunk data field</i> "(?regex)”</pre>
For example:
If your splunk _raw field contained the line “The sky is blue” and you wanted to
get the word blue and assign it to a variable of COLOUR, you would do the following:
<pre class="code">sourcetype="your_source_type" source="/etc/foo/bar" | rex field=_raw "The sky is\s+(?\w+)\.*"
</pre>
i.e “The sky is” followed by one of more spaces, followed by one or more word characters (which are assigned to the variable COLOUR) followed by 0 or more of any characters. i.e, standard regex but instead of putting the assignment braces around only the (\w+) you also insert ? to the left of it, so you end up with (?\w+)

Now you have a variable called COLOUR you can pipe it to a table
<pre class="code">sourcetype="your_source_type" source="/etc/foo/bar" | rex field=_raw "The sky is\s+(?\w+)\.*" | table COLOUR</pre>
Here’s a real world example, to pull out the http method, response code and uri from apache’s access logs and render them in a table:
<div id="post-body-6765486644803036963" class="post-body entry-content">
<pre class="code">sourcetype="myproject:ihs" source="/usr/websphere*/ihs*" | rex field=_raw "(?&lt;METHOD&gt;POST|GET|PUT)\s+(?&lt;URI&gt;.*\s+)\.*HTTP/1.1\"##(?&lt;CODE&gt;\d+)" | table host, CODE, METHOD, URI
</pre>
<div></div>
</div>
<div class="post-footer"></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>23</wp:post_id>
  <wp:post_date>2018-01-13 15:02:00</wp:post_date>
  <wp:post_date_gmt>2018-01-13 15:02:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>splunk-regex</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="splunk"><![CDATA[splunk]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21247893002]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Configure IBM's ikeycmd tool to support CMS</title>
  <link>https://devopsrunbook.wordpress.com/2018/01/13/configure-ibms-ikeycmd-tool-to-support-cms/</link>
  <pubDate>Sat, 13 Jan 2018 14:02:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/01/13/configure-ibms-ikeycmd-tool-to-support-cms/</guid>
  <description/>
  <content:encoded><![CDATA[<br><span style="color:#444444;font-family:verdana;font-size:16px;"> Surprisingly, when using ikeycmd recently to manipulate IHS keystores (kdb), I had to specifically configure the CMS storetype as follows:  </span> <div style="background:#f8f8f8;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:18px;"> ../jre/bin/ikeycmd  -DADD_CMS_SERVICE_PROVIDER_ENABLED=true -cert -details -label foo  -db plugin-key.kdb -stashed </div><br><br><br>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>24</wp:post_id>
  <wp:post_date>2018-01-13 14:02:00</wp:post_date>
  <wp:post_date_gmt>2018-01-13 14:02:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>configure-ibms-ikeycmd-tool-to-support-cms</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ihs"><![CDATA[ihs]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Passwordless openssl</title>
  <link>https://devopsrunbook.wordpress.com/2018/01/13/passwordless-openssl/</link>
  <pubDate>Sat, 13 Jan 2018 13:58:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/01/13/passwordless-openssl/</guid>
  <description/>
  <content:encoded><![CDATA[<span style="color:#444444;font-family:verdana;font-size:16px;"> To prevent being prompted for a password in openssl, you can provide a password as follows:</span>
<div style="background:#f8f8f8;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:18px;">openssl pkcs12 -in key.pkcs12 -clcerts -nodes -out all.pem -passin pass:my_password</div>
&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>25</wp:post_id>
  <wp:post_date>2018-01-13 13:58:00</wp:post_date>
  <wp:post_date_gmt>2018-01-13 13:58:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>passwordless-openssl</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="openssl"><![CDATA[openssl]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21247930196]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>bash shell shorthand conditionals</title>
  <link>https://devopsrunbook.wordpress.com/2018/01/13/bash-shell-shorthand-conditionals/</link>
  <pubDate>Sat, 13 Jan 2018 13:53:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/01/13/bash-shell-shorthand-conditionals/</guid>
  <description/>
  <content:encoded><![CDATA[<!-- HTML for divs generated using hilite.me --> This is a neat way in bash scripts to use conditionals. The basic syntax is:
<pre>[ condition ] &amp;&amp; action
[ condition ] || action</pre>
counting files in a directory
<pre>[ $(ls -1 | wc -l) -ne 1 ] &amp;&amp; echo “More than one file in this directory”</pre>
checking the number of args passed
<pre>[ $# -eq 1 ] || expecting "Expecting one argument"</pre>
you can also group multiple actions together as follows:
<pre>[ $# -eq 1 ] || { echo "Expecting one argument"; exit 1; }</pre>
&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>26</wp:post_id>
  <wp:post_date>2018-01-13 13:53:00</wp:post_date>
  <wp:post_date_gmt>2018-01-13 13:53:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>bash-shell-shorthand-conditionals</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21247950447]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using grep to show lines adjacent to the search string</title>
  <link>https://devopsrunbook.wordpress.com/2018/01/13/using-grep-to-show-lines-adjacent-to-the-search-string/</link>
  <pubDate>Sat, 13 Jan 2018 13:32:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2018/01/13/using-grep-to-show-lines-adjacent-to-the-search-string/</guid>
  <description/>
  <content:encoded><![CDATA[<!-- HTML for divs generated using hilite.me --><b> <span> Using a file with the following contents: </span></b> <br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;font-size:18px;overflow:auto;padding:.2em .6em;width:auto;">line 1<br />line 2<br />line 3<br />line 4<br />line 5<br />line 6<br />line 7<br />line 8<br />line 9<br />line 10</div><br /><b><span>cat test_data | grep -B2 'line 5' </span></b> <br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;font-size:18px;overflow:auto;padding:.2em .6em;width:auto;">will display:<br />line 3<br />line 4<br />line 5</div><br /><br /> <b><span>cat test_data | grep -A2 'line 5' </span></b><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;font-size:18px;overflow:auto;padding:.2em .6em;width:auto;">will display:<br />line 5<br />line 6<br />line 7</div><br /><br /> <b><span>cat test_data | grep -A2 -B2 'line 5' </span></b><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;font-size:18px;overflow:auto;padding:.2em .6em;width:auto;">will display:<br />line 3<br />line 4<br />line 5<br />line 6<br />line 7</div><br /><br />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>2018-01-13 13:32:00</wp:post_date>
  <wp:post_date_gmt>2018-01-13 13:32:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-grep-to-show-lines-adjacent-to-the-search-string</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="grep"><![CDATA[grep]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Access tomcat manager from remote host</title>
  <link>https://devopsrunbook.wordpress.com/2017/09/23/access-tomcat-manager-from-remote-host/</link>
  <pubDate>Sat, 23 Sep 2017 22:23:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/09/23/access-tomcat-manager-from-remote-host/</guid>
  <description/>
  <content:encoded><![CDATA[<span style="color:#444444;font-family:verdana;font-size:16px;"> Alongside configuring access in $CATALINA_HOME/conf/tomcat-users.xml, an additional step is required if you want to access the manager application from a remote host. Edit the <b>$CATALINA_HOME/webapps/manager/META-INF/context.xml</b> file and ensure the <b>allow</b> attribute has a value of <b>^.*$</b>.   <br><br> For example: <br> </span> <!-- HTML generated using hilite.me --><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin:0;line-height:125%;"><span style="color:#333333;">&lt;</span>Valve className<span style="color:#333333;">=</span><span style="background-color:#fff0f0;">"org.apache.catalina.valves.RemoteAddrValve"</span> allow<span style="color:#333333;">=</span><span style="background-color:#fff0f0;">"^.*$"</span> <span style="color:#333333;">/&gt;</span><br /></pre></div> <br>  <br> <span style="color:#444444;font-family:verdana;font-size:16px;">The complete file will look similar to this: </span>    <!-- HTML generated using hilite.me --><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin:0;line-height:125%;">&lt;<span style="border:1px solid #FF0000;">?</span>xml version=<span style="font-style:italic;">"1.0"</span> encoding=<span style="font-style:italic;">"UTF-8"</span><span style="border:1px solid #FF0000;">?</span>&gt;<br />&lt;Context antiResourceLocking=<span style="font-style:italic;">"false"</span> privileged=<span style="font-style:italic;">"true"</span> &gt;<br />&lt;Valve className=<span style="font-style:italic;">"org.apache.catalina.valves.RemoteAddrValve"</span> allow=<span style="font-style:italic;">"^.*$"</span> /&gt;<br />&lt;Manager sessionAttributeValueClassNameFilter=<span style="font-style:italic;">"java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter$LruCache(?:$1)?|java\.util\.(?:Linked)?HashMap"</span>/&gt;<br /><br /></pre></div>  <br><br>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>28</wp:post_id>
  <wp:post_date>2017-09-23 22:23:00</wp:post_date>
  <wp:post_date_gmt>2017-09-23 22:23:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>access-tomcat-manager-from-remote-host</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="tomcat"><![CDATA[tomcat]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Set up an ELK stack (CentOS)</title>
  <link>https://devopsrunbook.wordpress.com/2017/09/10/set-up-an-elk-stack-centos/</link>
  <pubDate>Sun, 10 Sep 2017 17:19:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/09/10/set-up-an-elk-stack-centos/</guid>
  <description/>
  <content:encoded><![CDATA[<div class="p1"># -------------------------------------------------------------------------------------------------------------------------------------</div><div class="p1"><b>Elasticsearch</b></div><div class="p1"># -------------------------------------------------------------------------------------------------------------------------------------</div><div class="p2"><br /></div><div class="p1"><b>install java:</b></div><div class="p1">yum install -y java</div><div class="p2"><b></b><br /></div><div class="p1"><b>Install elasticsearch: </b></div><div class="p1">yum install -y elasticsearch-5.5.2.rpm</div><div class="p2"><b></b><br /></div><div class="p1"><b>Start elasticsearch:</b> </div><div class="p1">service elasticsearch start</div><div class="p2"><br /></div><div class="p1"><b>Configure elasticsearch</b></div><div class="p1">/etc/elasticsearch/elasticsearch.yml</div><div class="p2"><br /></div><div class="p1"><b>Test elasticsearch:</b></div><div class="p1">curl http://10.1.1.100:9200</div><div class="p2"><br /></div><div class="p1">this should return something like the following:</div><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">{<br />  <span style="color:green;font-weight:bold;">"name"</span> : <span style="color:#ba2121;">"BT_A1W0"</span>,<br />  <span style="color:green;font-weight:bold;">"cluster_name"</span> : <span style="color:#ba2121;">"elasticsearch"</span>,<br />  <span style="color:green;font-weight:bold;">"cluster_uuid"</span> : <span style="color:#ba2121;">"85TTdoncTPqC2vAnEufDWQ"</span>,<br />  <span style="color:green;font-weight:bold;">"version"</span> : {<br />    <span style="color:green;font-weight:bold;">"number"</span> : <span style="color:#ba2121;">"5.5.2"</span>,<br />    <span style="color:green;font-weight:bold;">"build_hash"</span> : <span style="color:#ba2121;">"b2f0c09"</span>,<br />    <span style="color:green;font-weight:bold;">"build_date"</span> : <span style="color:#ba2121;">"2017-08-14T12:33:14.154Z"</span>,<br />    <span style="color:green;font-weight:bold;">"build_snapshot"</span> : <span style="color:green;font-weight:bold;">false</span>,<br />    <span style="color:green;font-weight:bold;">"lucene_version"</span> : <span style="color:#ba2121;">"6.6.0"</span><br />  },<br />  <span style="color:green;font-weight:bold;">"tagline"</span> : <span style="color:#ba2121;">"You Know, for Search"</span><br />}<br /></pre></div><div class="p1"><br /></div><div class="p2"><br /></div><div class="p1"><b>Create entry in elasticsearch:</b></div><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">curl -XPUT <span style="color:#ba2121;">'10.1.1.100:9200/my_index/my_type/my_id'</span> -H <span style="color:#ba2121;">'Content-Type: application/json'</span> -d’<br /><span style="color:#666666;">{</span><br /><span style="color:#ba2121;">"user"</span>:<span style="color:#ba2121;">"bob”,</span><br /><span style="color:#ba2121;">"</span>post_date<span style="color:#ba2121;">":"</span>2009-11-15T14:12:12”,<br /><span style="color:#ba2121;">"message"</span>:”hello<span style="border:0 solid #FF0000;">"</span><br /><span style="color:#666666;">}</span>’<br /></pre></div><div class="p1"><br /></div><div class="p1">The PUT must be of the form <b>/index/type/id </b>(at least I think this is the case)</div><div class="p2"><br /></div><div class="p1"><b>List indexes</b></div><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">curl <span style="color:#ba2121;">"http://10.1.1.100:9200/_cat/indices"</span><br /></pre></div><div class="p1"><br /></div><div class="p2"><br /></div><div class="p1"><b>delete all indexes:</b></div><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">curl -X DELETE <span style="color:#ba2121;">"http://10.1.1.100:9200/_all"</span><br /></pre></div><div class="p1"><br /></div><div class="p2"><br /></div><div class="p2"><b></b><br /></div><div class="p1"># -------------------------------------------------------------------------------------------------------------------------------------</div><div class="p1">#<b> Logstash</b></div><div class="p1"># -------------------------------------------------------------------------------------------------------------------------------------</div><div class="p2"><br /></div><div class="p1"><b>Install logstash:</b></div><div class="p1"><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">yum install -y logstash-5.5.2.rpm<br /></pre></div><br /></div><div class="p1"><b>Configure logstash: </b></div><div class="p2"><b></b><br /></div><div class="p1">Assuming you have Apache HTTP server installed, create /etc/logstash/conf.d/logstash.conf with the following contents:</div><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">input <span style="color:#666666;">{</span><br />  file <span style="color:#666666;">{</span><br />    <span style="color:#19177c;">path</span> <span style="color:#666666;">=</span>&gt; <span style="color:#ba2121;">"/var/log/httpd/access*"</span><br />    <span style="color:#19177c;">start_position</span> <span style="color:#666666;">=</span>&gt; “end<span style="color:#ba2121;">"</span><br /><span style="color:#ba2121;">  }</span><br /><span style="color:#ba2121;">}</span><br /><br /><span style="color:#ba2121;">filter {</span><br /><span style="color:#ba2121;">  grok {</span><br /><span style="color:#ba2121;">    match =&gt; { "</span>message<span style="color:#ba2121;">" =&gt; "</span>%<span style="color:#666666;">{</span>COMBINEDAPACHELOG<span style="color:#666666;">}</span><span style="color:#ba2121;">" }</span><br /><span style="color:#ba2121;">  }</span><br /><span style="color:#ba2121;">  date {</span><br /><span style="color:#ba2121;">    match =&gt; [ "</span>timestamp<span style="color:#ba2121;">" , "</span>dd/MMM/yyyy:HH:mm:ss Z<span style="color:#ba2121;">" ]</span><br /><span style="color:#ba2121;">  }</span><br /><span style="color:#ba2121;">}</span><br /><br /><span style="color:#ba2121;">output {</span><br /><span style="color:#ba2121;">  stdout {</span><br /><span style="color:#ba2121;">    codec =&gt; rubydebug</span><br /><span style="color:#ba2121;">  }</span><br /><span style="color:#ba2121;">  elasticsearch {</span><br /><span style="color:#ba2121;">    hosts =&gt; ["</span>10.1.1.100:9200<span style="border:0 solid #FF0000;">"</span><span style="color:#666666;">]</span><br />  <span style="color:#666666;">}</span><br /><span style="color:#666666;">}</span><br /></pre></div><div class="p2"><br /></div><div class="p1"><br /></div><div class="p2"><br /></div><div class="p2"><b>Start logstash</b><b></b><br /><b><br /></b></div><div class="p2"><b></b></div><div class="p1">To test that things are working correctly, you can start in the foreground as follows:</div><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf<br /></pre></div><div class="p1"><br /></div><div class="p1">Once you’re happy you may want to create a basic init.d script,  e.g:</div><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="color:#408080;font-style:italic;">#!/bin/bash</span><br /><br /><span style="color:green;font-weight:bold;">function </span>start<span style="color:#666666;">()</span> <span style="color:#666666;">{</span><br />        <span style="color:green;">echo</span> <span style="color:#ba2121;">"Starting logstash..."</span><br />        /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf --config.reload.automatic &gt; /var/log/logstash/logstash.log 2&gt;&amp;1 &amp;<br /><span style="color:#666666;">}</span><br /><br /><span style="color:green;font-weight:bold;">function </span>stop<span style="color:#666666;">()</span> <span style="color:#666666;">{</span><br />        <span style="color:green;">echo</span> <span style="color:#ba2121;">"Stopping logstash..."</span><br />        pkill -9 -f .+logstash/runner.rb<br /><span style="color:#666666;">}</span><br /><br /><span style="color:green;font-weight:bold;">case</span> <span style="color:#19177c;">$1</span> in<br />        start<span style="color:#666666;">)</span><br />                start<br />                ;;<br /><br />        stop<span style="color:#666666;">)</span><br />                stop<br />                ;;<br /><br />        restart<span style="color:#666666;">)</span><br />                stop<br />                sleep 3<br />                start<br />                ;;<br /><br />        *<span style="color:#666666;">)</span><br />                <span style="color:green;">echo</span> <span style="color:#ba2121;">""</span><br />                <span style="color:green;">echo</span> <span style="color:#ba2121;">"Usage $0 start|stop|restart"</span><br />                <span style="color:green;">echo</span> <span style="color:#ba2121;">""</span><br />                ;;<br /><span style="color:green;font-weight:bold;">esac</span><br /></pre></div><div class="p2"><br /></div><div class="p1"><br /></div><div class="p2"><br /></div><div class="p1">Once things are up and running, hit your Apache server with an HTTP request. Because you’ve set up an STDOUT output you’ll get something similar to the following in /var/log/logstash/logstash.log:</div><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="color:#666666;">{</span><br />        <span style="color:#ba2121;">"request"</span> <span style="color:#666666;">=</span>&gt; <span style="color:#ba2121;">"/"</span>,<br />        <span style="color:#ba2121;">"agent"</span> <span style="color:#666666;">=</span>&gt; <span style="color:#ba2121;">"\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36\""</span>,<br />        <span style="color:#ba2121;">"auth"</span> <span style="color:#666666;">=</span>&gt; <span style="color:#ba2121;">"-"</span>,<br />        <span style="color:#ba2121;">"ident"</span> <span style="color:#666666;">=</span>&gt; <span style="color:#ba2121;">"-"</span>,<br />        <span style="color:#ba2121;">"verb"</span> <span style="color:#666666;">=</span>&gt; <span style="color:#ba2121;">"GET"</span>,<br />        <span style="color:#ba2121;">"message"</span> <span style="color:#666666;">=</span>&gt; <span style="color:#ba2121;">"10.1.1.1 - - [31/Aug/2017:20:47:12 +0000] \"GET / HTTP/1.1\" 302 233 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36\""</span>,<br />        <span style="color:#ba2121;">"path"</span> <span style="color:#666666;">=</span>&gt; <span style="color:#ba2121;">"/var/log/httpd/access_log"</span>,<br />        <span style="color:#ba2121;">"referrer"</span> <span style="color:#666666;">=</span>&gt; <span style="color:#ba2121;">"\"-\""</span>,<br />        <span style="color:#ba2121;">"@timestamp"</span> <span style="color:#666666;">=</span>&gt; 2017-08-31T20:47:12.000Z,<br />        <span style="color:#ba2121;">"response"</span> <span style="color:#666666;">=</span>&gt; “200<span style="color:#ba2121;">",</span><br /><span style="color:#ba2121;">        "</span>bytes<span style="color:#ba2121;">" =&gt; "</span>233<span style="color:#ba2121;">",</span><br /><span style="color:#ba2121;">        "</span>clientip<span style="color:#ba2121;">" =&gt; "</span>10.1.1.1<span style="color:#ba2121;">",</span><br /><span style="color:#ba2121;">        "</span>@version<span style="color:#ba2121;">" =&gt; "</span>1<span style="color:#ba2121;">",</span><br /><span style="color:#ba2121;">        "</span>host<span style="color:#ba2121;">" =&gt; "</span>jupiter<span style="color:#ba2121;">",</span><br /><span style="color:#ba2121;">        "</span>httpversion<span style="color:#ba2121;">" =&gt; "</span>1.1<span style="color:#ba2121;">",</span><br /><span style="color:#ba2121;">        "</span>timestamp<span style="color:#ba2121;">" =&gt; "</span>31/Aug/2017:20:47:12 +0000<span style="border:0 solid #FF0000;">"</span><br /><span style="color:#666666;">}</span><br /></pre></div><div class="p2"><br /></div><div class="p1"><br /></div><div class="p2"><br /></div><div class="p2">Also, because you set up an output to elasticsearch you will see this entry in there too:</div><div class="p2"><br /></div><div class="p1">Check for the index as follows:</div><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">curl <span style="color:#ba2121;">"http://10.1.1.100:9200/_cat/indices/logstash-*"</span><br /></pre></div><div class="p1"><br /></div><div class="p1">Take a look at the index as follows:</div><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">curl <span style="color:#ba2121;">"http://10.1.1.100:9200/logstash-*?pretty"</span><br /></pre></div><div class="p1"><br /></div><div class="p2"><br /></div><div class="p2"># -------------------------------------------------------------------------------------------------------------------------------------</div><div class="p1">#<b> Kibana</b></div><div class="p1"># -------------------------------------------------------------------------------------------------------------------------------------</div><div class="p2"><br /></div><div class="p1"><b>Install Kibana</b></div><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">tar xvzf kibana-5.5.2-linux-x86_64.tar.gz -C /opt<br /><span style="color:green;">cd</span> /opt<br />mv kibana-5.5.2-linux-x86_64 kibana</pre></div><div class="p2"><br /></div><div class="p1"><b>Configure Kibaba</b></div><div class="p1">Edit /opt/kibana/config/kibana.yml, set <b>server.host</b> and elasticsearch.url</div><div class="p2"><br /></div><div class="p1"><b>Start kibana</b></div><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="color:green;">cd</span> /opt/kibana/bin <span style="color:#666666;">&amp;&amp;</span> ./kibana &amp;<br /></pre></div><div class="p1"><br /></div><div class="p1"><b>Test kibana</b></div><ul class="ul1"><li class="li3">In a browser, navigate to http://10.1.1.100:5601</li><li class="li1">Navigate to dev tools</li><li class="li1">In the left panel type <b>GET _cat/indices</b> and click the green arrow to run the query</li><li class="li1">In the results window you should see the index created by logstash (when you made a request from Apache earlier) similar to:</li><ul class="ul2"><!-- HTML generated using hilite.me --><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">yellow open logstash-2017.08.31 uzTssKBfTuecbgGzth-ViA 5 1 2 0 23.2kb 23.2kb<br /></pre></div></ul><li class="li1">Navigate to Management</li><li class="li1">Select Index patterns </li><li class="li1">Create an index pattern of logstash-*</li><li class="li1">Our Grok filter that we set up in logstash should have created approx 38 feilds from the Apache log, you should see that many of these are agregatable which means they can be used in visualisations</li></ul><ul class="ul1"><li class="li1">Navigate to Visualisations &gt; create visualisations &gt; vertical bar</li><li class="li1">Select the logstash-* index pattern you created earlier </li><li class="li1">you’ll see the Y-axis is already set up as count </li><li class="li1">Under buckets select X-axis</li><li class="li1">for aggregation select Date Histogram with a field of @timestamp</li><li class="li1">Add a sub bucket with a bucket size of split series </li><li class="li1">select a sub aggregation of terms with a filed of response.keyword</li><li class="li1">Run the visual by pressing the blue/white arrow (top left)</li></ul>p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Helvetica} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Helvetica; min-height: 16.0px} li.li1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Helvetica} li.li3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Helvetica; color: #9e4a2f} span.s1 {text-decoration: underline} span.Apple-tab-span {white-space:pre} ul.ul1 {list-style-type: disc} ul.ul2 {list-style-type: circle}                                                                                                                                                                                                  <br /><div class="p1"><br /></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>29</wp:post_id>
  <wp:post_date>2017-09-10 17:19:00</wp:post_date>
  <wp:post_date_gmt>2017-09-10 17:19:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>set-up-an-elk-stack-centos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="elk"><![CDATA[ELK]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Ansible check if variable is defined</title>
  <link>https://devopsrunbook.wordpress.com/?p=30</link>
  <pubDate>Wed, 06 Sep 2017 18:01:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/09/06/ansible-check-if-variable-is-defined/</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>30</wp:post_id>
  <wp:post_date>2017-09-06 18:01:00</wp:post_date>
  <wp:post_date_gmt>2017-09-06 18:01:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ansible-check-if-variable-is-defined</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ansible"><![CDATA[ansible]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>bash option parser</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/30/bash-option-parser/</link>
  <pubDate>Wed, 30 Aug 2017 09:44:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/30/bash-option-parser/</guid>
  <description/>
  <content:encoded><![CDATA[<br><span style="color:#444444;font-family:verdana;font-size:16px;"> A nice way of parsing options passed to a bash script without relying on position: </span> <br><br> <!-- HTML generated using hilite.me --><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin:0;line-height:125%;"><span style="color:#888888;">#!/bin/bash</span><br /><br /><span style="color:#008800;font-weight:bold;">for </span>i in <span style="background-color:#fff0f0;">"$@"</span><br />  <span style="color:#008800;font-weight:bold;">do</span><br /><span style="color:#008800;font-weight:bold;">    case</span> <span style="color:#996633;">$i</span> in<br /><br />      --node-port<span style="color:#333333;">=</span>*<span style="color:#333333;">)</span><br />      <span style="color:#996633;">NODEPORT</span><span style="color:#333333;">=</span><span style="background-color:#fff0f0;">"${i#*=}"</span><br />      ;;<br /> <br />      --jjp-host<span style="color:#333333;">=</span>*<span style="color:#333333;">)</span><br />      <span style="color:#996633;">JJPHOST</span><span style="color:#333333;">=</span><span style="background-color:#fff0f0;">"${i#*=}"</span><br />      ;;<br /> <br />      --jjp-port<span style="color:#333333;">=</span>*<span style="color:#333333;">)</span><br />      <span style="color:#996633;">JJPPORT</span><span style="color:#333333;">=</span><span style="background-color:#fff0f0;">"${i#*=}"</span><br />      ;;<br /> <br />      --spp-host<span style="color:#333333;">=</span>*<span style="color:#333333;">)</span><br />      <span style="color:#996633;">SPPHOST</span><span style="color:#333333;">=</span><span style="background-color:#fff0f0;">"${i#*=}"</span><br />      ;;<br /> <br />      --spp-port<span style="color:#333333;">=</span>*<span style="color:#333333;">)</span><br />      <span style="color:#996633;">SPPPORT</span><span style="color:#333333;">=</span><span style="background-color:#fff0f0;">"${i#*=}"</span><br />      ;;<br /><br />      --help<span style="color:#333333;">)</span><br />      <span style="color:#007020;">echo</span> <span style="background-color:#fff0f0;">""</span><br />      <span style="color:#007020;">echo</span> <span style="background-color:#fff0f0;">"Usage example: start_app --spp-host=jupiter --spp-port=2000  --node-port=3000 --jjp-host=neptune --jjp-port=4000"</span><br />      <span style="color:#007020;">echo</span> <span style="background-color:#fff0f0;">""</span><br />      ;;<br /><br /> <br />      *<span style="color:#333333;">)</span><br />      ;;<br />  <br />  <span style="color:#008800;font-weight:bold;">esac</span><br /><span style="color:#008800;font-weight:bold;">done</span><br /> <br /><span style="color:#333333;">[</span> <span style="background-color:#fff0f0;">"${NODEPORT}XXX"</span> <span style="color:#333333;">==</span> <span style="background-color:#fff0f0;">"XXX"</span> <span style="color:#333333;">]</span> <span style="color:#333333;">&amp;&amp;</span> <span style="color:#333333;">{</span> <span style="color:#007020;">echo</span> <span style="background-color:#fff0f0;">"Warning: NODEPORT env var not set"</span>; <span style="color:#333333;">}</span><br /><span style="color:#333333;">[</span> <span style="background-color:#fff0f0;">"${JJPHOST}XXX"</span> <span style="color:#333333;">==</span> <span style="background-color:#fff0f0;">"XXX"</span> <span style="color:#333333;">]</span> <span style="color:#333333;">&amp;&amp;</span> <span style="color:#333333;">{</span> <span style="color:#007020;">echo</span> <span style="background-color:#fff0f0;">"Warning: JJPHOST env var not set"</span>; <span style="color:#333333;">}</span><br /><span style="color:#333333;">[</span> <span style="background-color:#fff0f0;">"${JJPPORT}XXX"</span> <span style="color:#333333;">==</span> <span style="background-color:#fff0f0;">"XXX"</span> <span style="color:#333333;">]</span> <span style="color:#333333;">&amp;&amp;</span> <span style="color:#333333;">{</span> <span style="color:#007020;">echo</span> <span style="background-color:#fff0f0;">"Warning: JJPPORT env var not set"</span>; <span style="color:#333333;">}</span><br /><span style="color:#333333;">[</span> <span style="background-color:#fff0f0;">"${SPPHOST}XXX"</span> <span style="color:#333333;">==</span> <span style="background-color:#fff0f0;">"XXX"</span> <span style="color:#333333;">]</span> <span style="color:#333333;">&amp;&amp;</span> <span style="color:#333333;">{</span> <span style="color:#007020;">echo</span> <span style="background-color:#fff0f0;">"Warning: SPPHOST env var not set"</span>; <span style="color:#333333;">}</span><br /><span style="color:#333333;">[</span> <span style="background-color:#fff0f0;">"${SPPPORT}XXX"</span> <span style="color:#333333;">==</span> <span style="background-color:#fff0f0;">"XXX"</span> <span style="color:#333333;">]</span> <span style="color:#333333;">&amp;&amp;</span> <span style="color:#333333;">{</span> <span style="color:#007020;">echo</span> <span style="background-color:#fff0f0;">"Warning: SPPPORT env var not set"</span>; <span style="color:#333333;">}</span><br /> <br /><span style="color:#007020;">export </span>NODEPORT<br /><span style="color:#007020;">export </span>JJPHOST<br /><span style="color:#007020;">export </span>JJPPORT<br /><span style="color:#007020;">export </span>SPPHOST<br /><span style="color:#007020;">export </span>SPPPORT<br /> <br /><span style="color:#007020;">cd</span> /applications/my_app<br />nohup npm run start &amp;<br /></pre></div>  <br><br><br>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>31</wp:post_id>
  <wp:post_date>2017-08-30 09:44:00</wp:post_date>
  <wp:post_date_gmt>2017-08-30 09:44:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>bash-option-parser</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bash"><![CDATA[bash]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Filter Git events within a Jenkinsfile</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/28/filter-git-events-within-a-jenkinsfile/</link>
  <pubDate>Mon, 28 Aug 2017 08:49:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/28/filter-git-events-within-a-jenkinsfile/</guid>
  <description/>
  <content:encoded><![CDATA[<span style="color:#444444;font-family:verdana;font-size:16px;"> Assuming you're using Git webhooks to trigger your Jenkins builds, let's say you want to trigger a different set of pipeline stages depending on whether the Git event is a push vs. a pull request. I.e for a push you may only wish to run static analysis and unit tests, whereas for a pull request you may want to add Selenium tests.  </span><br><br>  <span style="color:#444444;font-family:verdana;font-size:16px;"> The following Jenkinsfile snippet will achieve this </span>    <!-- HTML generated using hilite.me --><div style="background:#ffffff;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin:0;line-height:125%;"><span style="color:#888888;">// Import JSON Slurper</span><br /><span style="color:#008800;font-weight:bold;">import</span> <span style="color:#0e84b5;font-weight:bold;">groovy.json.JsonSlurperClassic</span><br /><br /><span style="color:#888888;">// Get the Git payload</span><br /><span style="color:#333399;font-weight:bold;">def</span> payload <span style="color:#333333;">=</span> <span style="color:#008800;font-weight:bold;">new</span> JsonSlurperClassic<span style="color:#333333;">().</span><span style="color:#0000CC;">parseText</span><span style="color:#333333;">(</span>env<span style="color:#333333;">.</span><span style="color:#0000CC;">payload</span><span style="color:#333333;">)</span><br /><br /><br /><span style="color:#888888;">// Now define a method to filter the event type</span><br /><span style="color:#008800;font-weight:bold;">private</span> String <span style="color:#0066BB;font-weight:bold;">getEventType</span> <span style="color:#333333;">(</span> payload <span style="color:#333333;">){</span><br /><br />   <span style="color:#008800;font-weight:bold;">if</span><span style="color:#333333;">(</span> payload<span style="color:#333333;">.</span><span style="color:#0000CC;">pull_request</span>  <span style="color:#333333;">&amp;&amp;</span> payload<span style="color:#333333;">.</span><span style="color:#0000CC;">action</span><span style="color:#333333;">.</span><span style="color:#0000CC;">toLowerCase</span><span style="color:#333333;">().</span><span style="color:#0000CC;">contains</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">"opened"</span><span style="color:#333333;">)</span> <span style="color:#333333;">){</span><br />      <span style="color:#008800;font-weight:bold;">return</span> <span style="background-color:#fff0f0;">"pull_req"</span><br />   <span style="color:#333333;">}</span><br /><br />   <span style="color:#008800;font-weight:bold;">else</span> <span style="color:#0066BB;font-weight:bold;">if</span><span style="color:#333333;">(</span> payload<span style="color:#333333;">.</span><span style="color:#0000CC;">ref</span> <span style="color:#333333;">&amp;&amp;</span> payload<span style="color:#333333;">.</span><span style="color:#0000CC;">head_commit</span><span style="color:#333333;">){</span><br />      <span style="color:#008800;font-weight:bold;">if</span><span style="color:#333333;">(</span> payload<span style="color:#333333;">.</span><span style="color:#0000CC;">ref</span><span style="color:#333333;">.</span><span style="color:#0000CC;">split</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&#039;/&#039;</span><span style="color:#333333;">)[</span><span style="color:#0000DD;font-weight:bold;">1</span><span style="color:#333333;">].</span><span style="color:#0000CC;">toLowerCase</span><span style="color:#333333;">().</span><span style="color:#0000CC;">contains</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&#039;head&#039;</span><span style="color:#333333;">)</span> <span style="color:#333333;">){</span><br />         <span style="color:#008800;font-weight:bold;">return</span> <span style="background-color:#fff0f0;">"push"</span><br />      <span style="color:#333333;">}</span><br /><br />      <span style="color:#008800;font-weight:bold;">else</span> <span style="color:#0066BB;font-weight:bold;">if</span><span style="color:#333333;">(</span> payload<span style="color:#333333;">.</span><span style="color:#0000CC;">ref</span><span style="color:#333333;">.</span><span style="color:#0000CC;">split</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&#039;/&#039;</span><span style="color:#333333;">)[</span><span style="color:#0000DD;font-weight:bold;">1</span><span style="color:#333333;">].</span><span style="color:#0000CC;">toLowerCase</span><span style="color:#333333;">().</span><span style="color:#0000CC;">contains</span><span style="color:#333333;">(</span><span style="background-color:#fff0f0;">&#039;tag&#039;</span><span style="color:#333333;">)</span> <span style="color:#333333;">){</span><br />         <span style="color:#008800;font-weight:bold;">return</span> <span style="background-color:#fff0f0;">"tag"</span><br />      <span style="color:#333333;">}</span><br />   <span style="color:#333333;">}</span><br /><span style="color:#333333;">}</span><br /><br /><br /><span style="color:#888888;">// Now decide what action to take </span><br /><span style="color:#333399;font-weight:bold;">def</span> eventType <span style="color:#333333;">=</span> getEventType<span style="color:#333333;">(</span> payload <span style="color:#333333;">)</span><br /><span style="color:#008800;font-weight:bold;">switch</span> <span style="color:#333333;">(</span>eventType<span style="color:#333333;">)</span> <span style="color:#333333;">{</span><br />  <span style="color:#008800;font-weight:bold;">case</span> <span style="background-color:#fff0f0;">"push"</span><span style="color:#333333;">:</span><br />    <span style="color:#333333;">............</span><br />    do something <br />    <span style="color:#333333;">............</span><br />    <span style="color:#008800;font-weight:bold;">break</span><span style="color:#333333;">;</span><br /><br />  <span style="color:#008800;font-weight:bold;">case</span> <span style="background-color:#fff0f0;">"pull_req"</span><span style="color:#333333;">:</span><br />    <span style="color:#333333;">............</span><br />    do something else <br />    <span style="color:#333333;">............</span><br />    <span style="color:#008800;font-weight:bold;">break</span><span style="color:#333333;">;</span><br /><br />  <span style="color:#008800;font-weight:bold;">default</span><span style="color:#333333;">:</span><br />      println <span style="background-color:#fff0f0;">"Git event ignored"</span><span style="color:#333333;">;</span><br />      currentBuild<span style="color:#333333;">.</span><span style="color:#0000CC;">displayName</span> <span style="color:#333333;">=</span> <span style="background-color:#fff0f0;">"Git event ignored"</span><br />      <br />      <span style="color:#888888;">// Tidy up the Jenkins GUI by deleting the ignored build</span><br />      <span style="color:#333399;font-weight:bold;">def</span> buildNumber <span style="color:#333333;">=</span> env<span style="color:#333333;">.</span><span style="color:#0000CC;">BUILD_ID</span><br />      node <span style="color:#333333;">{</span><br />            sh <span style="background-color:#fff0f0;">"curl -X POST http://:@:443/job/execute-pipeline/${buildNumber}/doDelete"</span><br />      <span style="color:#333333;">}</span><br /><br /><br /><br /><br /> <br /></pre></div>     <br><br><br>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>2017-08-28 08:49:00</wp:post_date>
  <wp:post_date_gmt>2017-08-28 08:49:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>filter-git-events-within-a-jenkinsfile</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="git"><![CDATA[git]]></category>
  <category domain="post_tag" nicename="groovy"><![CDATA[groovy]]></category>
  <category domain="post_tag" nicename="jenkins"><![CDATA[jenkins]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Vagrant provisioning scripts</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/27/vagrant-provisioning-scripts/</link>
  <pubDate>Sun, 27 Aug 2017 19:33:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/27/vagrant-provisioning-scripts/</guid>
  <description/>
  <content:encoded><![CDATA[An example "create-user.sh" script
<pre class="CICodeFormatter"><code class="CICodeFormatter">#!/bin/bash

# Add the user
sudo useradd -m clarkeb -s '/bin/bash'
sudo echo -e 'password\npassword\n' | sudo passwd clarkeb

# Set up sudo 
echo "clarkeb ALL=(ALL:ALL) NOPASSWD: ALL" &gt; /etc/sudoers.d/10_clarkeb

# Allow password based login
sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config
service sshd restart</code></pre>
An example Vagrantfile snippet to invoke the above script
<pre class="CICodeFormatter"><code class="CICodeFormatter">  config.vm.define "core01" do |core01|
    core01.vm.provision "shell", path: "create-user.sh"
    core01.vm.hostname = "core01"
    core01.vm.network "private_network", ip: "10.1.1.101"
    core01.vm.provider "virtualbox" do |vb|
    vb.memory = "1024"
      vb.customize ["modifyvm", :id, "--cpus", "1"]
    end
  end</code></pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2017-08-27 19:33:00</wp:post_date>
  <wp:post_date_gmt>2017-08-27 19:33:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>vagrant-provisioning-scripts</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="vagrant"><![CDATA[vagrant]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21247340393]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Vagrant and AWS</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/27/vagrant-and-aws/</link>
  <pubDate>Sun, 27 Aug 2017 19:02:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/27/vagrant-and-aws/</guid>
  <description/>
  <content:encoded><![CDATA[<span style="color:#444444;font-family:verdana;font-size:16px;"> An example Vagrantfile</span>
<pre class="CICodeFormatter"><code class="CICodeFormatter"> require 'vagrant-aws'  
  
 Vagrant.configure('2') do |config|  
   
  config.vm.box = "aws-box"  
  config.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"  
   
  config.vm.define "jupiter" do |jupiter|  
    jupiter.vm.provision "shell", path: "install_ansible.sh"  
    jupiter.vm.provider 'aws' do |aws, override|  
      aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']  
      aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']  
      aws.keypair_name = 'vagrant'  
      aws.region = 'us-west-2'  
      aws.ami = 'ami-20be7540'  
      aws.security_groups = ['default']  
      override.ssh.username = 'ansible'  
      override.ssh.private_key_path = '~/ec2/keys/vagrant.pem'  
      aws.tags = {  
       'Name' =&gt; "ansible"  
      }  
    end  
  end </code></pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>34</wp:post_id>
  <wp:post_date>2017-08-27 19:02:00</wp:post_date>
  <wp:post_date_gmt>2017-08-27 19:02:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>vagrant-and-aws</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="aws"><![CDATA[aws]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="vagrant"><![CDATA[vagrant]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21247287986]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What IP's are on my subnet?</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/23/what-ips-are-on-my-subnet/</link>
  <pubDate>Wed, 23 Aug 2017 15:42:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/23/what-ips-are-on-my-subnet/</guid>
  <description/>
  <content:encoded><![CDATA[<!-- HTML for divs generated using hilite.me --> <span style="color:#444444;font-family:verdana;font-size:16px;"> 1.) Clear arp cache </span> <div style="background:#f8f8f8;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:18px;"> sudo arp -ad </div><br> <span style="color:#444444;font-family:verdana;font-size:16px;"> 2.) Ping your subnet, for example... </span> <div style="background:#f8f8f8;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:18px;">        ping 10.1.1.255 </div><br> <span style="color:#444444;font-family:verdana;font-size:16px;"> 3.) Now look at arp entries </span> <div style="background:#f8f8f8;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:18px;"> arp -a </div><br> <span style="color:#444444;font-family:verdana;font-size:16px;"> Alternatively carry out an nmap ping scan (nmap uses ARP under the covers for this) </span> <div style="background:#f8f8f8;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:18px;"> nmap -sn 10.1.1.0/24 </div><br>  <br><br><br>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2017-08-23 15:42:00</wp:post_date>
  <wp:post_date_gmt>2017-08-23 15:42:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-ips-are-on-my-subnet</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="tcp"><![CDATA[TCP]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>port scanning</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/21/port-scanning/</link>
  <pubDate>Mon, 21 Aug 2017 19:38:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/21/port-scanning/</guid>
  <description/>
  <content:encoded><![CDATA[<!-- HTML for divs generated using hilite.me --> <span style="color:#444444;font-family:verdana;font-size:16px;">	Use <b>netcat</b> to check if UDP port 53 is open at IP 10.0.2.3 </span> <div style="background:#f8f8f8;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:18px;">	nc -vz -u 10.0.2.3 53 </div><br> <span style="color:#444444;font-family:verdana;font-size:16px;">	Use <b>natcat</b> to check if TCP ports 2000 to 2010 are open at IP 192.168.2.100 </span> <div style="background:#f8f8f8;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:18px;">        nc -zv 192.168.2.100 2000-2010 </div><br> <span style="color:#444444;font-family:verdana;font-size:16px;">	Use <b>nmap</b> with TCP connect option to check if TCP ports 2000 to 3000 are open at IP 10.1.1.34 </span> <div style="background:#f8f8f8;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:18px;">	nmap -sT -p 2000-3000 10.1.1.34 </div><br> <span style="color:#444444;font-family:verdana;font-size:16px;">	Same as above but skip nmap's host discovery (in case the target host is blocking ping probes)  </span> <div style="background:#f8f8f8;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:18px;">	nmap -sT -p 2000-3000 10.1.1.34 -Pn </div><br> <span style="color:#444444;font-family:verdana;font-size:16px;">	Use <b>nmap</b> with SYN scan option (the default) to check if TCP port 22 is open at IP 10.1.1.70 </span> <div style="background:#f8f8f8;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:18px;">	nmap -sS -p 22 10.0.2.15 </div><br> <span style="color:#444444;font-family:verdana;font-size:16px;">	Use <b>nmap</b> to check if UDP ports 53,161 and 162 are open at IP 192.168.1.1 </span> <div style="background:#f8f8f8;overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;font-size:18px;">	nmap -sU -p 53,161,162 192.168.1.1 </div><br>         <br><br><br>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>36</wp:post_id>
  <wp:post_date>2017-08-21 19:38:00</wp:post_date>
  <wp:post_date_gmt>2017-08-21 19:38:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>port-scanning</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Linux: one-liner group, user account and sudo setup</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/21/linux-one-liner-group-user-account-and-sudo-setup/</link>
  <pubDate>Mon, 21 Aug 2017 19:20:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/21/linux-one-liner-group-user-account-and-sudo-setup/</guid>
  <description/>
  <content:encoded><![CDATA[<span><br /></span><span>Running the following as root will:</span><br /><ul><li><span>create a group called ansible with an id of 30000</span></li><li><span>create a group called devops with an id of 30001</span></li><li><span>create a user called ansible with a password of mypass123 with a primary group of ansible and a secondary group of devops</span></li><li><span>setup passwordless root access via sudo for the ansible account </span></li></ul><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-size:large;">groupadd --gid 30000 ansible <span style="color:#666666;">&amp;&amp;</span> <span style="color:#bb6622;font-weight:bold;">\</span><br />groupadd --gid 30001 devops <span style="color:#666666;">&amp;&amp;</span> <span style="color:#bb6622;font-weight:bold;">\</span><br />useradd --uid 30000 ansible -m -g ansible --groups devops <span style="color:#666666;">&amp;&amp;</span> <span style="color:#bb6622;font-weight:bold;">\</span><br /><span style="color:green;">echo</span> -e <span style="color:#ba2121;">"mypass123\nmypass123"</span> | passwd ansible <span style="color:#666666;">&amp;&amp;</span> <span style="color:#bb6622;font-weight:bold;">\</span><br /><span style="color:green;">echo</span> <span style="color:#ba2121;">"%devops  ALL=(ALL)  NOPASSWD: ALL"</span> &gt; /etc/sudoers.d/10_devops</span><br /></pre></div><br /><br /><br /><br /><br />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2017-08-21 19:20:00</wp:post_date>
  <wp:post_date_gmt>2017-08-21 19:20:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>linux-one-liner-group-user-account-and-sudo-setup</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="useradd"><![CDATA[useradd]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Find which process is listening on a port with LSOF</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/21/find-which-process-is-listening-on-a-port-with-lsof/</link>
  <pubDate>Mon, 21 Aug 2017 19:04:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/21/find-which-process-is-listening-on-a-port-with-lsof/</guid>
  <description/>
  <content:encoded><![CDATA[<br /><span>You can usually use the -p option in netstat to find out which process is listening on a specific port as follows:</span><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-size:large;">netstat -anp | grep 22<br /></span></pre></div><span><br /></span><span>This would provide something to the following which is telling you that port 22 has been opened for listening by process sshd who's PID is 954</span><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-size:large;">tcp  0  0  0.0.0.0:22  0.0.0.0:*  LISTEN  954/sshd <br /></span></pre></div><span><br /></span><span>If you're in a fix and need a different method, good old fashioned LSOF can do the job </span><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-size:large;">lsof -i :22<br /></span></pre></div><span><br /></span><span>Which would provide something similar to the following:</span><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-size:large;">COMMAND  PID    USER   FD   TYPE DEVICE SIZE/OFF NODE NAME<br />sshd     954    root    3u  IPv4  16348      0t0  TCP *:ssh <span style="color:#666666;">(</span>LISTEN<span style="color:#666666;">)</span><br />sshd     954    root    4u  IPv6  16357      0t0  TCP *:ssh <span style="color:#666666;">(</span>LISTEN<span style="color:#666666;">)</span></span><br /></pre></div><span><br /></span><span><br /><br /></span><span><br /></span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>38</wp:post_id>
  <wp:post_date>2017-08-21 19:04:00</wp:post_date>
  <wp:post_date_gmt>2017-08-21 19:04:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>find-which-process-is-listening-on-a-port-with-lsof</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="network"><![CDATA[network]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Obtain information about installed packages on CentOS and Ubuntu</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/21/obtain-information-about-installed-packages-on-centos-and-ubuntu/</link>
  <pubDate>Mon, 21 Aug 2017 15:42:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/21/obtain-information-about-installed-packages-on-centos-and-ubuntu/</guid>
  <description/>
  <content:encoded><![CDATA[<br /><b><span>CentOS / RHEL / Fedora</span>  </b><br /><span><br /></span><span>List all installed packages</span>  <!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="background-color:white;white-space:pre-wrap;"><span>rpm -qa</span></span></pre></div><br /><span>Get information about a specific package</span><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="background-color:white;white-space:pre-wrap;"><span>rpm -qi  <br /></span></span></pre></div><br /><span>List all files in a specific package</span><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="background-color:white;white-space:pre-wrap;"><span>rpm -ql  <br /></span></span></pre></div><br />   <span>Combine the -a and -l options, in this exmaple we're searching for the package elasticsearch-5.5.2-1.noarch</span><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="background-color:white;white-space:pre-wrap;"><span>package=$(rpm -qa | grep elasticsearch) &amp;&amp; rpm -ql $package; <br /></span></span></pre></div>    <b><u><span><br /></span></u></b><b><u><span><br /></span></u></b><b><span>Ubuntu</span></b><br /><span><br /></span>  <span>List all installed packages</span> <!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="background-color:white;white-space:pre-wrap;"><span>dpkg-query -l</span></span></pre></div><br /><br /><span>List all files in a specific package</span><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="background-color:white;white-space:pre-wrap;"><span>dpkg-query -L  <br /></span></span></pre></div>    <br />    <br /><br /><br /><br />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>39</wp:post_id>
  <wp:post_date>2017-08-21 15:42:00</wp:post_date>
  <wp:post_date_gmt>2017-08-21 15:42:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>obtain-information-about-installed-packages-on-centos-and-ubuntu</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="apt-get"><![CDATA[apt-get]]></category>
  <category domain="post_tag" nicename="rpm"><![CDATA[rpm]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="yum"><![CDATA[yum]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Unable to login via SSH with password - can login with ssh key and can su</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/21/unable-to-login-via-ssh-with-password-can-login-with-ssh-key-and-can-su/</link>
  <pubDate>Mon, 21 Aug 2017 05:35:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/21/unable-to-login-via-ssh-with-password-can-login-with-ssh-key-and-can-su/</guid>
  <description/>
  <content:encoded><![CDATA[This is because sshd has registered too many logins with the incorrect password.
To reset the incorrect password count, run the following command:
<pre>pam_tally2 --&lt;user&gt; --reset</pre>
This is configured under /etc/pam.d/sshd

Original article at:

<a class="contentLink" style="background:#ffffff;border:0;margin:0;outline:0;padding:0;vertical-align:baseline;" href="http://www.tecmint.com/use-pam_tally2-to-lock-and-unlock-ssh-failed-login-attempts" target="_blank" rel="noopener noreferrer">http://www.tecmint.com/use-pam_tally2-to-lock-and-unlock-ssh-failed-login-attempts</a>

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>40</wp:post_id>
  <wp:post_date>2017-08-21 05:35:00</wp:post_date>
  <wp:post_date_gmt>2017-08-21 05:35:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>unable-to-login-via-ssh-with-password-can-login-with-ssh-key-and-can-su</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21247229855]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Accurately determine the number of CPU cores for a Linux machine</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/20/accurately-determine-the-number-of-cpu-cores-for-a-linux-machine/</link>
  <pubDate>Sun, 20 Aug 2017 21:38:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/20/accurately-determine-the-number-of-cpu-cores-for-a-linux-machine/</guid>
  <description/>
  <content:encoded><![CDATA[<span><br /></span><span style="background-color:white;color:#666666;white-space:pre-wrap;"><span>The number of processors shown by /proc/cpuinfo might not be the actual number of cores on the processor. For example a processor with 2 cores and hyperthreading would be reported as a processor with 4 cores. To get the actual number of cores, check the core id for unique values as follows:</span></span><br /><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-family:Verdana, sans-serif;"><span style="font-size:large;">cat /proc/cpuinfo | grep <span style="color:#ba2121;">"core id"</span> | sort -u </span><br /></span></pre></div><br /><br /><br />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>41</wp:post_id>
  <wp:post_date>2017-08-20 21:38:00</wp:post_date>
  <wp:post_date_gmt>2017-08-20 21:38:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>accurately-determine-the-number-of-cpu-cores-for-a-linux-machine</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>login to existing docker container as root</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/20/login-to-existing-docker-container-as-root/</link>
  <pubDate>Sun, 20 Aug 2017 21:24:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/20/login-to-existing-docker-container-as-root/</guid>
  <description/>
  <content:encoded><![CDATA[<br /><span style="font-family:verdana, sans-serif;font-size:large;">Run the following command from the host machine:</span><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-size:large;">docker <span style="color:green;">exec</span> -itu 0  bash</span></pre></div><br /><span>Explanation:</span><br /><span>The -i option means this session should be interactive</span><br /><span>The -t option means attach the session to a tty</span><br /><span>The -u 0 option means run the session as uid zero, which is of course root</span><br /><span>And finally the command to run in this case is bash</span><br /><br /><br /><br /><br />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>2017-08-20 21:24:00</wp:post_date>
  <wp:post_date_gmt>2017-08-20 21:24:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>login-to-existing-docker-container-as-root</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Transferring Docker Images between host machines</title>
  <link>https://devopsrunbook.wordpress.com/2017/08/20/transferring-docker-images-between-host-machines/</link>
  <pubDate>Sun, 20 Aug 2017 21:09:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/08/20/transferring-docker-images-between-host-machines/</guid>
  <description/>
  <content:encoded><![CDATA[<br /><span>Save the image on the source host: </span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span>docker save -o myimage.tar   <br /></span></pre></div><span><br />Now copy the saved image to the destination machine: </span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span>scp myimage.tar bob@jupiter.stack1.com:/docker-archives/myimage.tar<br /></span></pre></div><span><br />Then load the image: </span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span>docker load -i  /docker-archives/myimage.tar<br />or:<br />docker load &lt; /docker-archives/myimage.tar<br /></span></pre></div><span><br /></span><br /><div><span><br /></span></div><div><span><br /></span></div><div><span><br /></span></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>43</wp:post_id>
  <wp:post_date>2017-08-20 21:09:00</wp:post_date>
  <wp:post_date_gmt>2017-08-20 21:09:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>transferring-docker-images-between-host-machines</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Nginx - alias vs root</title>
  <link>https://devopsrunbook.wordpress.com/2017/07/13/nginx-alias-vs-root/</link>
  <pubDate>Thu, 13 Jul 2017 19:58:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/07/13/nginx-alias-vs-root/</guid>
  <description/>
  <content:encoded><![CDATA[<div class="MsoNormal" style="background-color:white;color:#222222;font-family:arial, sans-serif;font-size:16px;"><br /></div><div class="MsoNormal" style="background-color:white;color:#222222;font-size:16px;"><div class="MsoNormal" style="background-color:white;color:#222222;font-size:16px;font-style:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-weight:normal;letter-spacing:normal;orphans:2;text-align:start;text-decoration-color:initial;text-decoration-style:initial;text-indent:0;text-transform:none;white-space:normal;widows:2;word-spacing:0;"><div style="margin:0;"><span>Consider the following nginx config snippet:</span></div></div><!-- HTML generated using hilite.me --><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">server <span style="color:#333333;">{</span><br />    listen       80;<br />    server_name  my_server;<br /><br />    location /foo <span style="color:#333333;">{</span><br />        root         /var/html;<br />        autoindex on;<br />        allow all;<br />    <span style="color:#333333;">}</span><br />    location /bar <span style="color:#333333;">{</span><br />        <span style="color:#007020;">alias</span>         /var/html;<br />        autoindex on;<br />        allow all;<br />    <span style="color:#333333;">}</span><br /><span style="color:#333333;">}</span><br /></pre></div><br /></div><div class="MsoNormal" style="background-color:white;color:#222222;font-size:16px;"><span><u></u></span></div><div class="MsoNormal" style="background-color:white;color:#222222;font-size:16px;"><span>The <b>root</b> directive will map a request for <b>http://myserver.stack1.com/foo</b> to a directory <b>/var/html/foo</b><u></u></span></div><div class="MsoNormal" style="background-color:white;color:#222222;font-size:16px;"><span><br /></span></div><div class="MsoNormal" style="background-color:white;color:#222222;font-size:16px;"><span>The <b>alias</b> directive will map a request for </span><b style="font-family:Verdana, sans-serif;font-size:16px;">http://myserver.stack1.com/</b><span><b>bar</b> to a directory <b>/var/html </b> </span></div><div class="MsoNormal" style="background-color:white;color:#222222;font-size:16px;"><span>(i.e. The rested URI is not appended to the file system location)</span></div><div class="MsoNormal" style="background-color:white;color:#222222;font-family:arial, sans-serif;font-size:16px;"><br /></div><div class="MsoNormal" style="background-color:white;color:#222222;font-family:arial, sans-serif;font-size:16px;"><br /></div><div class="MsoNormal" style="background-color:white;color:#222222;font-family:arial, sans-serif;font-size:16px;"><br /></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>44</wp:post_id>
  <wp:post_date>2017-07-13 19:58:00</wp:post_date>
  <wp:post_date_gmt>2017-07-13 19:58:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>nginx-alias-vs-root</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Gitflow workflow</title>
  <link>https://devopsrunbook.wordpress.com/2017/06/28/gitflow-workflow/</link>
  <pubDate>Wed, 28 Jun 2017 16:03:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/06/28/gitflow-workflow/</guid>
  <description/>
  <content:encoded><![CDATA[<span>My understanding of how this differs from simple feature branches:</span><br /><ol><li><span>To start with, two branches exist named <b>master</b> and <b>develop</b> (the dev branch is derived from master)</span></li><li><span>Developers create and work on <b>feature</b> branches from the <b>develop</b> branch in the usual way and these are merged back into the <b>develop</b> branch regularly via pull requests.</span></li><li><span>If using semantic versioning, the minor number (2nd field) is incremented each time a backwards compatible feature is added. A non backwards compatible feature (breaking feature) would result in the major number (1st field) being incremented. </span></li><li><span>When it is decided that a release is due, a <b>release</b> branch is created from the <b>develop</b> branch. New features can still be added to the <b>develop</b> branch via feature branches in the usual way.</span></li><li><span>A deployable artifact is built from the <b>release</b> branch and the artifact is deployed to the appropriate test environments.</span></li><li><span>The deployed artifact is tested and any bug fixes are carried out on the release branch. Bug fixes increment the patch number (3rd field) of the semantic version number. <b>NOTE</b>: Only bug fixes can be carried out in the release branch. No features can be added to the release branch.</span></li><li><span>When all bugs are resolved and the release is finalised, the release branch is merged into both <b>develop</b> and <b>master</b> branches and <b>master</b> is also tagged with the semantic version number.</span></li></ol><div><span>Official doc:  <a href="https://www.atlassian.com/git/tutorials/comparing-workflows">https://www.atlassian.com/git/tutorials/comparing-workflows</a></span></div><div><span><br /></span></div><div><span><br /></span></div><div><span><br /></span></div><div><span><br /></span></div><div><span><br /></span></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>45</wp:post_id>
  <wp:post_date>2017-06-28 16:03:00</wp:post_date>
  <wp:post_date_gmt>2017-06-28 16:03:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>gitflow-workflow</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Trigger a Jenkins pipeline from a Git event (webhooks)</title>
  <link>https://devopsrunbook.wordpress.com/?p=46</link>
  <pubDate>Sat, 17 Jun 2017 22:12:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=46</guid>
  <description/>
  <content:encoded><![CDATA[<span style="font-family:Helvetica Neue, Arial, Helvetica, sans-serif;">Scenario:</span><br /><span style="font-family:Helvetica Neue, Arial, Helvetica, sans-serif;">You have a Jenkins workflow pipeline job (i.e. a job that uses a Jenkinsfile) which you want to trigger on specific Git events. You also wish to parse the payload from the Git event and depending on what type of Git event it was, run different parts of your Jenkinsfile pipeline.</span><br /><span style="font-family:Helvetica Neue, Arial, Helvetica, sans-serif;"><br /></span><span style="font-family:Helvetica Neue, Arial, Helvetica, sans-serif;">Steps:</span><br /><br />Set up a Jenkins <b>Pipeline</b> Job<br /><div class="separator" style="clear:both;text-align:left;"><a href="https://2.bp.blogspot.com/-3d4HctzpOZM/WUVtBjKLLuI/AAAAAAAAPoQ/eR3PZwNNN4AqbtY5C-MDXzGRxxhFmJAqACLcBGAs/s1600/Screen%2BShot%2B2017-06-17%2Bat%2B18.53.46.png" style="margin-left:1em;margin-right:1em;"><img border="0" height="267" src="https://2.bp.blogspot.com/-3d4HctzpOZM/WUVtBjKLLuI/AAAAAAAAPoQ/eR3PZwNNN4AqbtY5C-MDXzGRxxhFmJAqACLcBGAs/s640/Screen%2BShot%2B2017-06-17%2Bat%2B18.53.46.png" width="640" /></a></div><br /><br />In the job configuration, select "This build is parameterized" and add a String parameter. In this case I've named the parameter payload (this parameter will be populated with the JSON representation of the Git event):<br /><div class="separator" style="clear:both;text-align:left;"><a href="https://3.bp.blogspot.com/-R0-p848n5kU/WUWjNWfxohI/AAAAAAAAPos/pDa-vNDZYfUHzXex4qWTRkgzyu36hxMKACLcBGAs/s1600/Screen%2BShot%2B2017-06-17%2Bat%2B22.45.06.png" style="margin-left:1em;margin-right:1em;"><img border="0" height="438" src="https://3.bp.blogspot.com/-R0-p848n5kU/WUWjNWfxohI/AAAAAAAAPos/pDa-vNDZYfUHzXex4qWTRkgzyu36hxMKACLcBGAs/s640/Screen%2BShot%2B2017-06-17%2Bat%2B22.45.06.png" width="640" /></a></div><br /><br /><br />Under build triggers, select "<span style="background-color:#f9f9f9;color:#333333;font-family:Helvetica, Arial, sans-serif;font-size:14px;"><b>Trigger builds remotely (e.g., from scripts)</b>" and add a string of your choice for the <b>Authentication Token</b>. This string can be anything you like, it will for part of the URL that Git will use to trigger this pipeline. For example </span><span style="color:#333333;font-family:Helvetica, Arial, sans-serif;"><span style="font-size:14px;"><b>http://user:api_token@host:port/job/pipeline/buildWithParameters?token=my_pipeline_token</b></span></span><br /><div class="separator" style="clear:both;text-align:left;"><a href="https://3.bp.blogspot.com/-ilFrtia4CSs/WUVva8QT-zI/AAAAAAAAPoc/uROSnJjJvgElJ3Z4mQvs_tn_QVZux0tZgCLcBGAs/s1600/Screen%2BShot%2B2017-06-17%2Bat%2B19.05.07.png" style="margin-left:1em;margin-right:1em;"><img border="0" height="224" src="https://3.bp.blogspot.com/-ilFrtia4CSs/WUVva8QT-zI/AAAAAAAAPoc/uROSnJjJvgElJ3Z4mQvs_tn_QVZux0tZgCLcBGAs/s640/Screen%2BShot%2B2017-06-17%2Bat%2B19.05.07.png" width="640" /></a></div><span style="background-color:#f9f9f9;color:#333333;font-family:Helvetica, Arial, sans-serif;font-size:14px;"><br /></span><br />Under the pipeline section, set <b>Definition</b> to <b>Pipeline script from SCM</b>, add the URL of the git repo containing your Jenkinsfile and leave the <b>Branches to build</b> section blank:<br /><div class="separator" style="clear:both;text-align:left;"><a href="https://1.bp.blogspot.com/-09rElWAiA20/WUWoQZFrx2I/AAAAAAAAPo8/8Onvah-E87syopBimTBx0qsiCcmj3GOSgCLcBGAs/s1600/Screen%2BShot%2B2017-06-17%2Bat%2B23.07.19.png" style="margin-left:1em;margin-right:1em;"><img border="0" height="390" src="https://1.bp.blogspot.com/-09rElWAiA20/WUWoQZFrx2I/AAAAAAAAPo8/8Onvah-E87syopBimTBx0qsiCcmj3GOSgCLcBGAs/s640/Screen%2BShot%2B2017-06-17%2Bat%2B23.07.19.png" width="640" /></a></div><br /><br /><br /><br />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>46</wp:post_id>
  <wp:post_date>2017-06-17 22:12:00</wp:post_date>
  <wp:post_date_gmt>2017-06-17 22:12:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Installing a specific version of a yum package</title>
  <link>https://devopsrunbook.wordpress.com/2017/06/15/installing-a-specific-version-of-a-yum-package/</link>
  <pubDate>Thu, 15 Jun 2017 14:18:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/06/15/installing-a-specific-version-of-a-yum-package/</guid>
  <description/>
  <content:encoded><![CDATA[<span><b>using nodejs as an example</b></span><br /><span><br /></span><span>Search for the available versions:</span><br /><div style="background:#f0f0f0;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">sudo yum list nodejs --showduplicates<br /></pre></div><span class="Apple-tab-span" style="white-space:pre;"> </span><br /><span>This returns something like:</span><br /><div style="background:#f0f0f0;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">nodejs.i686       0.10.48-3.el6<br />nodejs.x86_64     0.10.48-3.el6<br />nodejs.x86_64     5.11.1-1nodesource.el6<br /></pre></div><br /><span>Therefore, to install version 5.11.1:</span><br /><div style="background:#f0f0f0;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">yum install nodejs-5.11.1-1nodesource.el6<br /></pre></div><br /><span>As can be seen, it's a case of removing the extension from the package name (i.e nodejs.x86_64 becomes nodejs) and then concatenating the version by way of a hyphen, the result being  nodejs-5.11.1-1nodesource.el6</span><br /><span><br /></span><span><br /></span><span><br /></span><span><br /></span><br /><div><br /></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>47</wp:post_id>
  <wp:post_date>2017-06-15 14:18:00</wp:post_date>
  <wp:post_date_gmt>2017-06-15 14:18:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>installing-a-specific-version-of-a-yum-package</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Finding out which yum package contains a specific binary</title>
  <link>https://devopsrunbook.wordpress.com/2017/06/13/finding-out-which-yum-package-contains-a-specific-binary/</link>
  <pubDate>Tue, 13 Jun 2017 20:50:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/06/13/finding-out-which-yum-package-contains-a-specific-binary/</guid>
  <description/>
  <content:encoded><![CDATA[<span>If I needed to install Apache Bench, the binary for which is <b>ab</b></span><br /><span>I would run: </span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">yum provides ab<br /></pre></div><br /><span>This returns: <!-- HTML generated using hilite.me --></span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">Loading mirror speeds from cached hostfile<br /> * base: mirrors.clouvider.net<br /> * epel: epel.mirrors.ovh.net<br /> * extras: centos.serverspace.co.uk<br /> * updates: mirror.sov.uk.goscomb.net<br /><b><span style="color:red;">httpd-tools-2.4.6-45.el7.centos.x86_64</span></b> : Tools <span style="color:#008800;font-weight:bold;">for </span>use with the Apache HTTP Server<br />Repo        : base<br />Matched from:<br />Filename    : /usr/bin/ab<br /></pre></div><br /><span style="background-color:white;color:#666666;font-size:16px;white-space:pre-wrap;"><span>Therefore the package needed is <b>httpd-tools </b>(sudo yum install http-tools)</span></span><br /><span style="background-color:white;color:#666666;font-size:16px;white-space:pre-wrap;"><span><b><br /></b></span></span><span style="background-color:white;color:#666666;font-size:16px;white-space:pre-wrap;"><span><b><br /></b></span></span><span style="background-color:white;color:#666666;font-size:16px;white-space:pre-wrap;"><span><b><br /></b></span></span><span style="background-color:white;color:#666666;font-size:16px;white-space:pre-wrap;"><span><b><br /></b></span></span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>48</wp:post_id>
  <wp:post_date>2017-06-13 20:50:00</wp:post_date>
  <wp:post_date_gmt>2017-06-13 20:50:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>finding-out-which-yum-package-contains-a-specific-binary</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Accessing yum from behind a corporate proxy</title>
  <link>https://devopsrunbook.wordpress.com/2017/06/13/accessing-yum-from-behind-a-corporate-proxy/</link>
  <pubDate>Tue, 13 Jun 2017 20:39:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/06/13/accessing-yum-from-behind-a-corporate-proxy/</guid>
  <description/>
  <content:encoded><![CDATA[<span>Append proxy and credentials to your <b>/etc/yum.conf</b> file as follows</span><br /><!-- HTML generated using hilite.me --><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="color:#996633;">proxy</span><span style="color:#333333;">=</span>http://proxy-host:proxy-port<br /><span style="color:#996633;">proxy_username</span><span style="color:#333333;">=</span>username<br /><span style="color:#996633;">proxy_password</span><span style="color:#333333;">=password</span><br /></pre></div><br /><br /><br />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>49</wp:post_id>
  <wp:post_date>2017-06-13 20:39:00</wp:post_date>
  <wp:post_date_gmt>2017-06-13 20:39:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>accessing-yum-from-behind-a-corporate-proxy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Upload files to Nexus</title>
  <link>https://devopsrunbook.wordpress.com/?p=50</link>
  <pubDate>Tue, 13 Jun 2017 19:51:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=50</guid>
  <description/>
  <content:encoded><![CDATA[<br /><span>To upload to a raw repository</span>   <!-- HTML generated using hilite.me --><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">curl -u <span style="background-color:#fff0f0;">'username:password'</span> -k --upload-file foo.tar https://my_nexus_host/repository/raw-repo/  <span style="color:#333333;">(</span>the trailing slash is required<span style="color:#333333;">)</span><br /></pre></div><br /><br />To Browse <a class="contentLink" href="https://devops.stack1.com/repo/#browse/browse/components:raw-repo" rel="noreferrer" target="_blank">https://devops.stack1.com/repo/#browse/browse/components:raw-repo</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>50</wp:post_id>
  <wp:post_date>2017-06-13 19:51:00</wp:post_date>
  <wp:post_date_gmt>2017-06-13 19:51:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Delete jenkins builds using curl</title>
  <link>https://devopsrunbook.wordpress.com/2017/06/13/delete-jenkins-builds-using-curl/</link>
  <pubDate>Tue, 13 Jun 2017 15:31:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/06/13/delete-jenkins-builds-using-curl/</guid>
  <description/>
  <content:encoded><![CDATA[<br /><span>To delete a single job: </span><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-size:large;">curl -X POST http://jenkins-user:jenkins-token@hostname:port/job/execute-pipeline/26/doDelete<br /></span></pre></div><br /><span>To delete a range of jobs: </span><!-- HTML generated using hilite.me --><br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-size:large;">curl -X POST http://jenkins-user:jenkins-token@hostname:port/job/execute-pipeline/<span style="color:#666666;">[</span>20-30<span style="color:#666666;">]</span>/doDelete<br /></span></pre></div><br /><span>This is handy for deleting a build arising from a git event you’ve chosen to ignore in your Jenkinsfile:</span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-size:large;">def <span style="color:#996633;">buildId</span> <span style="color:#333333;">=</span> env.BUILD_ID<br />node <span style="color:#333333;">{</span><br />    sh <span style="background-color:#fff0f0;">"curl -X POST http://my_user:my_token@my_host:8080/job/execute-pipeline/${buildId}/doDelete"</span><br /><span style="color:#333333;">}</span></span><br /></pre></div><br /><br /><br />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>51</wp:post_id>
  <wp:post_date>2017-06-13 15:31:00</wp:post_date>
  <wp:post_date_gmt>2017-06-13 15:31:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>delete-jenkins-builds-using-curl</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="git"><![CDATA[git]]></category>
  <category domain="post_tag" nicename="jenkins"><![CDATA[jenkins]]></category>
  <category domain="post_tag" nicename="pipeline"><![CDATA[pipeline]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Adding new RPM's to an existing yum repo</title>
  <link>https://devopsrunbook.wordpress.com/2017/06/10/adding-new-rpms-to-an-existing-yum-repo/</link>
  <pubDate>Sat, 10 Jun 2017 20:54:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/06/10/adding-new-rpms-to-an-existing-yum-repo/</guid>
  <description/>
  <content:encoded><![CDATA[<span><br /></span><span style="background-color:white;color:#333333;font-family:Verdana, sans-serif;font-size:large;white-space:pre-wrap;">1.) Copy the rpm to the repository directory (i.e alongside all the existing rpm's)</span><br /><span><br /></span> <span style="font-family:Verdana, sans-serif;font-size:large;"><span style="background-color:white;color:#333333;white-space:pre-wrap;">2.) Update the repository index:</span><!-- HTML generated using hilite.me --> </span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-size:large;">createrepo --update  --verbose<br /></span></pre></div><br /><span style="font-family:Verdana, sans-serif;font-size:large;"><span style="background-color:white;color:#333333;white-space:pre-wrap;">3.) Make sure your file permissions for /repodata are ok (</span><span style="background-color:white;color:#333333;white-space:pre-wrap;">i.e. so that your http server can access the files):</span><!-- HTML generated using hilite.me --> </span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-size:large;">chmod -R go+rx /repodata</span></pre></div><br /><span style="background-color:white;color:#333333;font-family:Verdana, sans-serif;font-size:large;white-space:pre-wrap;">(NOTE: don't forget to ensure the actual package file (the rpm) has the correct file permissions also)</span><br /><span><br /></span><span style="font-family:Verdana, sans-serif;font-size:large;"><span style="background-color:white;color:#333333;white-space:pre-wrap;">4.) Clear your yum client cache:</span><!-- HTML generated using hilite.me --> </span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="font-size:large;">yum clean all <br /></span></pre></div><br /><br /><br /><br /><br /><br />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>52</wp:post_id>
  <wp:post_date>2017-06-10 20:54:00</wp:post_date>
  <wp:post_date_gmt>2017-06-10 20:54:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>adding-new-rpms-to-an-existing-yum-repo</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="yum"><![CDATA[yum]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Set up a local yum repository</title>
  <link>https://devopsrunbook.wordpress.com/2017/06/10/set-up-a-local-yum-repository/</link>
  <pubDate>Sat, 10 Jun 2017 20:50:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/06/10/set-up-a-local-yum-repository/</guid>
  <description/>
  <content:encoded><![CDATA[<span style="font-family:Verdana, sans-serif;">Install yum-utils <!-- HTML generated using hilite.me --></span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span>yum install yum-utils createrepo<br /></span></pre></div><br><span style="font-family:Verdana, sans-serif;">Create a directory for the repo <!-- HTML generated using hilite.me --></span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span>mkdir /my_repo<br /></span></pre></div><br><span style="font-family:Verdana, sans-serif;">Get the RPM's to put in the repo. Use <b>reposync</b> to download from an existing repo or download rpm's manaully.. e.g. <!-- HTML generated using hilite.me --></span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span>wget http://mirror.lihnidos.org/CentOS/6/os/i386/Packages/NetworkManager-0.8.1-43.el6.i686.rpm<br /></span></pre></div><br><span style="font-family:Verdana, sans-serif;">Create the repository <!-- HTML generated using hilite.me --></span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span>createrepo /my_repo<br /></span></pre></div><br><span style="font-family:Verdana, sans-serif;">Create /etc/yum.repos.d/custom.repo with the following contents <!-- HTML generated using hilite.me --></span><br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span>[</span><span>customrepo</span><span><span style="color:#333333;">]</span></span></pre><pre style="line-height:125%;margin:0;"><span><br /><span style="color:#996633;">name</span><span style="color:#333333;">=</span><span style="color:#666666;">Custom Repository<br /></span><span style="color:#996633;">baseurl</span><span style="color:#333333;">=</span><span style="color:#666666;">file:////my_repo/<br /></span><span style="color:#996633;">enabled</span><span style="color:#333333;">=</span><span style="color:#666666;">1<br /></span><span style="color:#996633;">gpgcheck</span><span style="color:#333333;">=</span><span style="color:#666666;">0<br /></span></span></pre></div><span> <span><br /></span><span><br /></span><span><br /></span><span><br /></span></span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>53</wp:post_id>
  <wp:post_date>2017-06-10 20:50:00</wp:post_date>
  <wp:post_date_gmt>2017-06-10 20:50:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>set-up-a-local-yum-repository</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="yum"><![CDATA[yum]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>PM2 notes</title>
  <link>https://devopsrunbook.wordpress.com/2017/06/10/pm2-notes/</link>
  <pubDate>Sat, 10 Jun 2017 15:37:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/06/10/pm2-notes/</guid>
  <description/>
  <content:encoded><![CDATA[<br /><b><span>Passing Environment Variables</span></b><br /><span><br /></span><span>  Create a file called process.json with the following contents</span> <br /><div style="background:#f0f0f0;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="color:#666666;">{</span><br />  <span style="color:#4070a0;">"apps"</span> : <span style="color:#666666;">[{</span><br />    <span style="color:#4070a0;">"name"</span>        : <span style="color:#4070a0;">"my-app"</span>,<br />    <span style="color:#4070a0;">"script"</span>      : <span style="color:#4070a0;">"v1/app.js"</span>,<br />    <span style="color:#4070a0;">"env"</span>: <span style="color:#666666;">{</span><br />        <span style="color:#4070a0;">"VERSION"</span>: 1.0.0<br />     <span style="color:#666666;">}</span><br />  <span style="color:#666666;">}]</span></pre><pre style="line-height:125%;margin:0;"><span style="color:#666666;">}</span><br /></pre></div><br /><span>Now run the app as follows </span> <br /><div style="background:#f0f0f0;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">pm2 start process.json<br /></pre></div><span><br /></span><span>The variable <b>process.env.VERSION</b> will now be available inside your nodejs application and will be set to the value <b>1.0.0</b><br /></span><br /><br /><br /><br />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>54</wp:post_id>
  <wp:post_date>2017-06-10 15:37:00</wp:post_date>
  <wp:post_date_gmt>2017-06-10 15:37:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pm2-notes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="node"><![CDATA[node]]></category>
  <category domain="post_tag" nicename="pm2"><![CDATA[pm2]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Authenticate to an internal npm repository</title>
  <link>https://devopsrunbook.wordpress.com/2017/06/09/authenticate-to-an-internal-npm-repository/</link>
  <pubDate>Fri, 09 Jun 2017 17:08:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/06/09/authenticate-to-an-internal-npm-repository/</guid>
  <description/>
  <content:encoded><![CDATA[<br />Run the following commands:<br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;">npm config <span style="color:#007020;">set </span>registry https://my_nexus_server/repositories/npm/<br />npm config <span style="color:#007020;">set </span>strict-ssl <span style="color:#007020;">false</span><br />npm config <span style="color:#007020;">set </span>always-auth <span style="color:#007020;">true</span><br />npm config <span style="color:#007020;">set </span>_auth bXktdXNlcjpteS1wYXNzd29yZA==<br /></pre></div><br />Generate the base64 as follows (don't forget the -n otherwise the newline character will be added to the base64 string:<br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="color:#007020;">echo</span> -n <span style="background-color:#fff0f0;">'my-user:my-password'</span> | openssl base64<br /></pre></div><br />Alternatively you can just create a ~/.npmrc file as follows:<br /><div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="color:#996633;">registry</span><span style="color:#333333;">=</span>https://my_nexus_server/repositories/npm/<br />strict-ssl<span style="color:#333333;">=</span><span style="color:#007020;">false</span><br />always-auth<span style="color:#333333;">=</span><span style="color:#007020;">true</span><br /><span style="color:#996633;">_auth</span><span style="color:#333333;">=</span><span style="background-color:#fff0f0;">"bXktdXNlcjpteS1wYXNzd29yZA=="</span><br /></pre></div><br /><br /><b>NOTE</b>: any config keys starting with an underscore are hidden, therefore they will not be echoed to the screen when running <span> <b>npm config --list</b></span><br /><span><b><br /></b></span><span><b><br /></b></span><span><b><br /></b></span><span><b><br /></b></span><span><b><br /></b></span><span><b><br /></b></span><span><b><br /></b></span><span><b><br /></b></span><span><b><br /></b></span><span><br /></span><span><br /></span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>55</wp:post_id>
  <wp:post_date>2017-06-09 17:08:00</wp:post_date>
  <wp:post_date_gmt>2017-06-09 17:08:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>authenticate-to-an-internal-npm-repository</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="npm"><![CDATA[npm]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Pull Docker images from behind a corporate proxy - TLS Trust</title>
  <link>https://devopsrunbook.wordpress.com/2017/06/09/pull-docker-images-from-behind-a-corporate-proxy-tls-trust/</link>
  <pubDate>Fri, 09 Jun 2017 16:51:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/06/09/pull-docker-images-from-behind-a-corporate-proxy-tls-trust/</guid>
  <description/>
  <content:encoded><![CDATA[<span><b><span style="color:red;">IMPORTANT NOTE</span></b>: This applies to an <span style="color:red;"><b>old version of Docker (1.7)</b></span> when using on <b><span style="color:red;">RHEL 6.6</span></b> and therefore may not be relevant to newer versions. </span><br /><div><span><br /></span></div><div><span>If you need to pull images from Docker Hub from behind a corporate proxy you will need to address two issues:</span></div><div><ol><li><span>You will need to configure Docker to use (and potentially authenticate with) your corporate HTTP proxy</span></li><li><span>If you're receiving a message along the lines of "X509 certificate signed by an unrecognised CA" you will need to configure Docker to trust the corporate proxies TLS certificate. </span></li></ol><div><span>The first issue is addressed as follows:</span></div></div><div><br /><ul><li><span>Open the file /etc/sysconfig/docker and add the following two lines</span></li></ul></div><div style="background:#f0f0f0;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="color:#007020;">export </span><span style="color:#bb60d5;">HTTP_PROXY</span><span style="color:#666666;">=</span>http://username:password@proxy-hostname:proxy-port<br /><span style="color:#007020;">export </span><span style="color:#bb60d5;">HTTPS_PROXY</span><span style="color:#666666;">=</span>http://username:password@proxy-hostname:proxy-port<br /></pre></div><br /><span>The second issue is addressed as follows: </span><br /><span>(NOTE: in my experience using the --insecure-registry option does not work. This is contrary to the documentation and contrary to the advice given in the logs)</span><br /><br /><ul><li><span>Create a directory named /etc/docker/certs.d (I believe /etc/docker is the default and is configurable via the DOCKER_CERTS property which can be set in /etc/sysconfig/docker. However I haven't tested this)</span></li><li><span>Under /etc/docker/certs.d, create a directory for each domain of the Docker registry you need to trust. For example if you're attempting to pull from index.docker.io, you should create a directory named index.docker.io. To be clear, the resulting path will be /etc/docker/certs.d/index.docker.io. (NOTE:  It's likely that multiple domains will need to be added. In order to determine this, see the section titled <b>Debugging</b> below)</span></li><li><span>Copy a PEM formatted copy of your corporate proxy's certificate (or associated CA signer) into the directory(s) you created in the previous step. The filename used should be ca.crt</span></li><li><span>Restart docker engine.</span></li><li><span>Now re-attempt your docker pull and all should be well. If not, set your log level to debug as specified below and tail the logs to determine which directories need to be created (the logs are verbose enough in debug mode to point you in the right direction).</span></li></ul><div><span><br /></span></div><div><span><b>Debugging</b></span></div><div><span>To determine which domains are acting as Docker registries and subsequently which directories need to be created under /etc/docker/certs.d, set the log level for docker engine to debug as follows:</span></div><div><ul><li><span>Open /etc/sysconfig/docker for editing</span></li><li><span>Add the <b>--log-level=debug </b>to <b>other_args</b></span></li><li><span>restart docker engine</span></li></ul></div><div><span><br /></span></div><div><span><br /></span></div><div><span><br /></span></div><br /><span><br /></span><span><br /></span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>56</wp:post_id>
  <wp:post_date>2017-06-09 16:51:00</wp:post_date>
  <wp:post_date_gmt>2017-06-09 16:51:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pull-docker-images-from-behind-a-corporate-proxy-tls-trust</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
  <category domain="post_tag" nicename="proxy"><![CDATA[proxy]]></category>
  <category domain="post_tag" nicename="ssl"><![CDATA[ssl]]></category>
  <category domain="post_tag" nicename="tls"><![CDATA[tls]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Adding Linux users via ssh</title>
  <link>https://devopsrunbook.wordpress.com/2017/06/09/adding-linux-users-via-ssh/</link>
  <pubDate>Fri, 09 Jun 2017 16:49:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/06/09/adding-linux-users-via-ssh/</guid>
  <description/>
  <content:encoded><![CDATA[<!-- HTML generated using hilite.me --><br />bash script to add users via and set password via ssh<br /><div style="background:#f8f8f8;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;"><pre style="line-height:125%;margin:0;"><span style="color:#408080;font-style:italic;">#!/bin/bash</span><br /> <br /><span style="color:#19177c;">USER_TO_ADD</span><span style="color:#666666;">=</span>ansible<br /><span style="color:#19177c;">USER_TO_ADD_UID</span><span style="color:#666666;">=</span>30000<br /><span style="color:#19177c;">USER_TO_ADD_GID</span><span style="color:#666666;">=</span>30000<br /> <br /><span style="color:#666666;">[</span> <span style="color:#19177c;">$# </span>-eq 1 <span style="color:#666666;">]</span> <span style="color:#666666;">||</span> <span style="color:#666666;">{</span><br />        <span style="color:green;">echo</span> <span style="color:#ba2121;">"please provide target host"</span><br />        <span style="color:green;">exit </span>1<br /><span style="color:#666666;">}</span><br /> <br /><span style="color:#19177c;">TARGET_HOST</span><span style="color:#666666;">=</span><span style="color:#19177c;">$1</span><br /><span style="color:#19177c;">R</span><span style="color:#666666;">=</span><span style="color:green;font-weight:bold;">$(</span>ping <span style="color:green;font-weight:bold;">${</span><span style="color:#19177c;">TARGET_HOST</span><span style="color:green;font-weight:bold;">}</span> 2&gt;&amp;1<span style="color:green;font-weight:bold;">)</span><br /><span style="color:#666666;">[</span> <span style="color:#19177c;">$?</span> -eq 0 <span style="color:#666666;">]</span> <span style="color:#666666;">||</span> <span style="color:#666666;">{</span><br />        <span style="color:green;">echo</span> <span style="color:#ba2121;">"Unable to ping  ${TARGET_HOST}. Error is $R"</span><br />        <span style="color:green;">exit </span>1<br /><span style="color:#666666;">}</span><br />  <br />ssh -t <span style="color:green;font-weight:bold;">${</span><span style="color:#19177c;">TARGET_HOST</span><span style="color:green;font-weight:bold;">}</span> <span style="color:#ba2121;">"sudo groupadd ${USER_TO_ADD} --gid ${USER_TO_ADD_GID}" &amp;&amp; \</span><br /> <span style="color:#ba2121;">"sudo useradd -m ${USER_TO_ADD} --uid ${USER_TO_ADD_GID} --gid ${USER_TO_ADD_GID}" &amp;&amp; \</span><br /> <span style="color:#ba2121;">"getent passwd ${USER_TO_ADD}" &amp;&amp; \</span><br /> <span style="color:#ba2121;">"usermod --groups wheel ${USER_TO_ADD}" &amp;&amp; \</span><br /> <span style="color:#ba2121;">"echo -e '${USER_TO_ADD}\n${USER_TO_ADD}\n' | sudo passwd ${USER_TO_ADD}"</span><br /></pre></div><br /><br /><br /><br /><br /><br /><br /><br />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>57</wp:post_id>
  <wp:post_date>2017-06-09 16:49:00</wp:post_date>
  <wp:post_date_gmt>2017-06-09 16:49:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>adding-linux-users-via-ssh</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>storing git credentials</title>
  <link>https://devopsrunbook.wordpress.com/2017/06/09/storing-git-credentials/</link>
  <pubDate>Fri, 09 Jun 2017 16:42:00 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/2017/06/09/storing-git-credentials/</guid>
  <description/>
  <content:encoded><![CDATA[<span style="font-family:Verdana, sans-serif;">If you need to store git credentials so that you don't have to keep entering them </span><span style="font-family:Verdana, sans-serif;">when cloning a git repo over http(s)</span><span style="font-family:Verdana, sans-serif;">
</span>

<span style="font-family:Verdana, sans-serif;">Add the following to ~/.gitconfig</span>
<pre><span style="color:#333333;">[</span>user<span style="color:#333333;">]</span> 
<span style="color:#996633;">  email</span> <span style="color:#333333;">=</span> bobmclarke@gmail.com 
<span style="color:#996633;">  name</span> <span style="color:#333333;">=</span> Bob Clarke 
<span style="color:#333333;">[</span>credential<span style="color:#333333;">]</span> 
<span style="color:#996633;">  helper</span> <span style="color:#333333;">=</span> store</pre>
<span style="font-family:Verdana, sans-serif;">Then create ~/.git-credentials with the following contents</span>
<pre>https://your-username:your-password@github.com</pre>
<span style="font-family:Verdana, sans-serif;">Now authentication to Git will work without prompting for credentials.</span>

<span style="font-family:Verdana, sans-serif;">Another way of generating these files is to run:</span>
<div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;">
<pre style="line-height:125%;margin:0;">git config --global user.email <span style="color:#aa5500;">"bobmclarke@gmail.com"</span>
git config --global user.name <span style="color:#aa5500;">"Bob Clarke"</span></pre>
<pre style="line-height:16.25px;">git config --global credential.helper store</pre>
</div>
<span style="font-family:Verdana, sans-serif;">Then push to the repo at which point you'll be prompted for your username and password. After you enter them for the first time a ~/.git-credentials file will be generated as above.</span>

<span style="font-family:Verdana, sans-serif;">This can be useful if the developers in your team are using git as an npm repo for internal modules with something in the package.json like:</span>
<div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;">
<pre style="line-height:125%;margin:0;"><span style="color:#aa5500;">"some-npm-package-name"</span>: <span style="color:#aa5500;">"git+https://github.com/bobclarke/mymodule#v1.0"</span></pre>
</div>
<span style="font-family:Verdana, sans-serif;">The downside is that your Git credentials will be stored in <span style="color:red;"><b>PLAIN TEXT </b></span>so be aware.</span>
<span style="font-family:Verdana, sans-serif;">
</span><span style="font-family:Verdana, sans-serif;">Last thing to note, if you're doing this on an internal Github you may need to ignore ssl certs as follows:</span>
<div style="background:#ffffff;border-width:.1em .1em .1em .8em;border:solid gray;overflow:auto;padding:.2em .6em;width:auto;">
<pre style="line-height:125%;margin:0;">git config --global http.sslVerify <span style="color:#00aaaa;">false</span></pre>
</div>
p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Monaco; color: #f5f5f5; background-color: #2f2f2f}]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>58</wp:post_id>
  <wp:post_date>2017-06-09 16:42:00</wp:post_date>
  <wp:post_date_gmt>2017-06-09 16:42:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>storing-git-credentials</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="git"><![CDATA[git]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>restapi_import_id</wp:meta_key>
    <wp:meta_value><![CDATA[5b6f197fa2b75]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21204958502]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Brigade dependencies</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/12/brigade-dependencies/</link>
  <pubDate>Sun, 12 Aug 2018 19:36:37 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=60</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Taken from&nbsp;<a href="https://github.com/Azure/brigade/blob/master/docs/topics/workers.md" target="_blank" rel="noopener">https://github.com/Azure/brigade/blob/master/docs/topics/workers.md</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you need different dependencies for every Brigade project, this can be easily achieved using a brigade.json file placed side-by-side the brigade.js file. This file contains the dependency name and version, and has the following structure:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">{
    "dependencies": {
        "is-thirteen": "2.0.0"
    }
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Before starting to execute the brigade.js script, the worker will install the<br>
dependencies using yarn, adding them to the node_modules folder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then, in the brigade.js file, the new dependency can be used just like any other NodeJS dependency:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">const { events } = require("brigadier")
const is = require("is-thirteen");

events.on("exec", function (e, p) {
    console.log("is 13 thirteen? " + is(13).thirteen());
})</pre>
<!-- /wp:syntaxhighlighter/code -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>60</wp:post_id>
  <wp:post_date>2018-08-12 19:36:37</wp:post_date>
  <wp:post_date_gmt>2018-08-12 19:36:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>brigade-dependencies</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="brigade"><![CDATA[brigade]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21012446285]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534102598]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Test post</title>
  <link>https://devopsrunbook.wordpress.com/?p=74</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=74</guid>
  <description/>
  <content:encoded><![CDATA[<h3>Test heading</h3>
hdahsdkah dksjahdkjashdashd dakhdsjkashd ad dkahsdkahds adkhakd hdkahdkadhkahdkahdkahdkahdkah]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>74</wp:post_id>
  <wp:post_date>2018-08-17 22:42:21</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="test"><![CDATA[test]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Init container logs</title>
  <link>https://devopsrunbook.wordpress.com/?p=107</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=107</guid>
  <description/>
  <content:encoded><![CDATA[describe the pod this will show you the name of the init container(s)

kubectl logs &lt;pod name&gt; -c &lt;init container name&gt; -n &lt;namespace&gt;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>107</wp:post_id>
  <wp:post_date>2018-08-17 23:48:32</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Running brigade containers in parallel</title>
  <link>https://devopsrunbook.wordpress.com/?p=202</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=202</guid>
  <description/>
  <content:encoded><![CDATA[Create an array of folders containing BDD scenarios
<pre>testFolderArray = [
"src/test/features/feature_1",
"src/test/features/feature_2",
"src/test/features/feature_3",
];</pre>
var integJobArray = [];

for (i = 0, len = testFolderArray.length; i &lt; len; i++) {

testName = testFolderArray[i].split('/').pop()

let integTest = new Job( "integ-" + testName + "-" +i )

integTest.image = "tvstackreg.azurecr.io/tvstack_bdd:v1.0.3"
integTest.storage.enabled = true

integTest.env = {
"BDD_REPO": project.secrets.bdd_repo,
"GITEA_TOKEN": project.secrets.gitea_token,
"AZURE_CLIENT_ID": project.secrets.azure_client_id,
"AZURE_CLIENT_SECRET": project.secrets.azure_client_secret,
"AZURE_TENANT_ID": project.secrets.azure_tenant_id,
"TEST_FOLDER": testFolderArray[i],
"TEST_NAME": testName,
"APP_NAME": project.secrets.app_name,
"TEAM_NAME": project.secrets.team_name,
"DEPLOY_ENV": "dev",
"BDD_CONFIG": "src/test/resources/env.conf",
}
integTest.tasks = [
"cd /src",
"./integ_tests.sh ${BDD_REPO} ${GITEA_TOKEN} ${AZURE_CLIENT_ID} ${AZURE_CLIENT_SECRET} ${AZURE_TENANT_ID} ${TEST_FOLDER} ${TEAM_NAME} ${DEPLOY_ENV} ${BDD_CONFIG}"
]

integJobArray.push(integTest);

}]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>202</wp:post_id>
  <wp:post_date>2018-08-18 13:07:33</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Helm service account and related clusterrolebinding</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/18/helm-service-account-and-related-clusterrolebinding/</link>
  <pubDate>Sat, 18 Aug 2018 13:19:29 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=203</guid>
  <description/>
  <content:encoded><![CDATA[Quick method:
<pre>kubectl -n kube-system create sa tiller &amp;&amp; \ 
  kubectl create clusterrolebinding tiller \
  --clusterrole cluster-admin \
  --serviceaccount=kube-system:tiller &amp;&amp; \ 
  helm init --service-account tiller</pre>
&nbsp;

Longer method:

Create the following foo.yaml
<pre>---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: <a class="contentLink" href="http://rbac.authorization.k8s.io/v1beta1" target="_blank" rel="noopener noreferrer">rbac.authorization.k8s.io/v1beta1</a>
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: <a class="contentLink" href="http://rbac.authorization.k8s.io/" target="_blank" rel="noopener noreferrer">rbac.authorization.k8s.io</a>
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system</pre>
&nbsp;

Now run
<pre>kubectl create -f foo.yaml 
helm init --service-account tiller</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>203</wp:post_id>
  <wp:post_date>2018-08-18 13:19:29</wp:post_date>
  <wp:post_date_gmt>2018-08-18 13:19:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>helm-service-account-and-related-clusterrolebinding</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21212551327]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534598371]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>pod environment vars from configMap</title>
  <link>https://devopsrunbook.wordpress.com/?p=210</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=210</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>210</wp:post_id>
  <wp:post_date>2018-08-18 14:33:49</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Pod environment vars from configmap</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/18/pod-environment-vars-from-configmap/</link>
  <pubDate>Sat, 18 Aug 2018 14:52:45 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=211</guid>
  <description/>
  <content:encoded><![CDATA[<span class="contentBold">C</span><span class="contentBold">r</span><span class="contentBold">e</span><span class="contentBold">a</span><span class="contentBold">t</span><span class="contentBold">e</span> <span class="contentBold">a</span> <span class="contentBold">c</span><span class="contentBold">o</span><span class="contentBold">n</span><span class="contentBold">f</span><span class="contentBold">i</span><span class="contentBold">gm</span><span class="contentBold">a</span><span class="contentBold">p</span><span class="contentBold">:</span>
<pre>kubectl create configmap env-config \
  --from-literal=ENV_VAR_1=FOO --from-literal=ENV_VAR_2=BAR</pre>
Create a pod to use this config map
<pre>cat &lt;&lt;EOF | kubectl create -f -
apiVersion: v1
kind: Pod
metadata:
  name: test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh", "-c", "env" ]
      envFrom:
      - configMapRef:
          name: env-config
  restartPolicy: Never
EOF</pre>
This pod will print it's env and then exit

<span class="contentBold">V</span><span class="contentBold">i</span><span class="contentBold">e</span><span class="contentBold">w</span> <span class="contentBold">t</span><span class="contentBold">h</span><span class="contentBold">e</span> <span class="contentBold">p</span><span class="contentBold">o</span><span class="contentBold">d</span> <span class="contentBold">e</span><span class="contentBold">n</span><span class="contentBold">v</span> <span class="contentBold">v</span><span class="contentBold">a</span><span class="contentBold">r</span><span class="contentBold">i</span><span class="contentBold">a</span><span class="contentBold">b</span><span class="contentBold">l</span><span class="contentBold">e</span><span class="contentBold">s with:</span>
<pre><span class="contentBold">kubectl logs test-pod -c test-container</span></pre>
This will provide something similar to the following output:
<pre>KUBERNETES_PORT=tcp://10.96.0.1:443
KUBERNETES_SERVICE_PORT=443
HOSTNAME=test-pod
SHLVL=1
HOME=/root
EXAMPLE_SERVICE_PORT_8080_TCP_ADDR=10.100.105.233
EXAMPLE_SERVICE_SERVICE_HOST=10.100.105.233
EXAMPLE_SERVICE_PORT_8080_TCP_PORT=8080
ENV_VAR_1=FOO
ENV_VAR_2=BAR
EXAMPLE_SERVICE_PORT_8080_TCP_PROTO=tcp
KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
EXAMPLE_SERVICE_PORT=tcp://10.100.105.233:8080
EXAMPLE_SERVICE_SERVICE_PORT=8080
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
KUBERNETES_PORT_443_TCP_PORT=443
KUBERNETES_PORT_443_TCP_PROTO=tcp
EXAMPLE_SERVICE_PORT_8080_TCP=tcp://10.100.105.233:8080
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
PWD=/
KUBERNETES_SERVICE_HOST=10.96.0.1</pre>
&nbsp;

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>211</wp:post_id>
  <wp:post_date>2018-08-18 14:52:45</wp:post_date>
  <wp:post_date_gmt>2018-08-18 14:52:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pod-environment-vars-from-configmap</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21214742647]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534603966]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>using etcdctl</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/18/using-etcdctl/</link>
  <pubDate>Sat, 18 Aug 2018 15:15:36 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=217</guid>
  <description/>
  <content:encoded><![CDATA[API V3 examples
<pre>etcdctl --cacert="/etc/kubernetes/certs/ca.crt" \
  --cert="/etc/kubernetes/certs/etcdclient.crt" \
  --key="/etc/kubernetes/certs/etcdclient.key"  \
  get /registry/pods/ --prefix --keys-only

etcdctl --endpoint='https://127.0.0.1:6666' \
  --cert-file=/etc/etcd_networking/etcd.pem \
  --key-file=/etc/etcd_networking/etcd-key.pem \
  --ca-file=/etc/etcd_networking/ca.pem \
  get /calico/v1/ipam/v4/pool/172.16.0.0-16

etcdctl --endpoint='https://127.0.0.1:2379' \
  --cacert="/etc/kubernetes/certs/ca.crt" \
  --cert="/etc/kubernetes/certs/etcdclient.crt" \
  --key="/etc/kubernetes/certs/etcdclient.key" \
  --debug \
  get / --prefix --keys-only</pre>
&nbsp;

API V2 example
<pre>etcdctl --endpoint='<a class="contentLink" href="https://127.0.0.1:2379'/" target="_blank" rel="noopener noreferrer">https://127.0.0.1:2379'</a> \
  --cert-file=/etc/etcd_networking/etcd.pem \
  --key-file=/etc/etcd_networking/etcd-key.pem \
  --ca-file=/etc/etcd_networking/ca.pem \
  ls  / --recursive</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>217</wp:post_id>
  <wp:post_date>2018-08-18 15:15:36</wp:post_date>
  <wp:post_date_gmt>2018-08-18 15:15:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-etcdctl</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21215275403]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534605336]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Sort kubernetes events</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/18/sort-kubernetes-events/</link>
  <pubDate>Sat, 18 Aug 2018 15:18:09 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=219</guid>
  <description/>
  <content:encoded><![CDATA[<pre>kubectl get events --sort-by=.metadata.creationTimestamp -w</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>219</wp:post_id>
  <wp:post_date>2018-08-18 15:18:09</wp:post_date>
  <wp:post_date_gmt>2018-08-18 15:18:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sort-kubernetes-events</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21215348904]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534605490]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>How does a K8s pod have access to the API server</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/18/how-does-a-k8s-pod-have-access-to-the-api-server/</link>
  <pubDate>Sat, 18 Aug 2018 15:21:09 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=221</guid>
  <description/>
  <content:encoded><![CDATA[exec into a pod and run
<pre><span class="name">env | grep KUBER</span></pre>
The output will look something like this:
<pre>KUBERNETES_PORT=tcp://10.0.0.1:443
KUBERNETES_SERVICE_PORT=443
KUBERNETES_PORT_443_TCP_ADDR=10.0.0.1
KUBERNETES_PORT_443_TCP_PORT=443
KUBERNETES_PORT_443_TCP_PROTO=tcp
KUBERNETES_PORT_443_TCP=tcp://10.0.0.1:443
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_SERVICE_HOST=10.0.0.1</pre>
This is enough info to at least get to the API server as follows:
<pre>curl -k https://10.0.0.1:443/api/v1</pre>
This will return something like the following:
<pre>{
    "kind": "Status",
    "apiVersion": "v1",
    "metadata": {
    },
    "status": "Failure",
    "message": "Unauthorized",
    "reason": "Unauthorized",
    "code": 401
}</pre>
So at this stage we're hitting the API server but we're not authorised. Luckily each pod has a default service account associated with it, the token for which can be found under <span style="color:#008000;"><strong>/var/run/secrets/kubernetes.io/serviceaccount</strong></span>.

So, we can modify our service account to look something like the following:
<pre>curl -k https://10.0.0.1:443/api/v1 -H "Authorization: Bearer &lt;token&gt;"</pre>
Here's a practical example:
<pre>curl -k https://10.0.0.1:443/api/v1 -H "Authorization: Bearer asJhbGciOiJhUzI1NiIsInR5cCs6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5flWNlYWNjb3VudC9uYW1lc3BhgsgsgJ0dnN0YWNrMDEiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2faaavdW50L3NlY3JldC5uYW1lIjoiZGfkkememmed9t1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiZDNhZjRlOTQtN2FkMy0xMWU4LWI3MDctMDAyMjQ4MDdlMTFiIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OnR2c3RhY2swMTpkZWZhdWx0In0.emTXjNUnZZXoQocM7EM2-Ny97J-uO2o8SkZqMOb-b2wCQxm_piZj6DpGxG1c7PmexfVhW9La2KkDh5G49SB3-8q7vV9AdtnPWVsK4WS-DGilf0w3TxyWw2gbKqgWiMarTn-cCy67Mb0R9YB2KGvQapWYWmQf9PP7tQQPnvngVwpMilD0hWDDNFARZEI8H7mOQkls24kUixGV0uGgXUh0NF-1B_bQSYQa_nJuWoHSJOSQt8LiOxxc4IxXsOwzUlm0QFIESYEClhTeV-1vxCwgCCS9N7YftLFdL4kdNQ9XxOOvB3GROWrGwf8-wgOkegplvhvwCL1_L1jDiUm8ElgyfQEc5jFjqRjOZ1Yh_BpeBW1fFKtIRJgc2TcthscORC50_iMacOcMmvOy2erVx_oacbXF0-JhBDfoJUbcsz8mFsZUP71edliqGeBQQGiSmISe9iTjPcv10YWomVAFTDF49mgn2NWbPJD7kA3QZtfr4xe6NSRu6WvvXrs0m_edLTyTRyBnBGFtDVwC9wsh9VrVc2LtD-vOjLglJSm5drv9E5KkvCiXF3Epw4pUfwumI5KkGfmNTUY17RKO2F4_CzB9_trPNa6FBRFBsj9TbwrIH9i-Mvxs9ABhkGhM7poF2b4A8jxz7G-genIjnX-x42sooJFxBaVLxtepjHYfm6DXKuQ"</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>221</wp:post_id>
  <wp:post_date>2018-08-18 15:21:09</wp:post_date>
  <wp:post_date_gmt>2018-08-18 15:21:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-does-a-k8s-pod-have-access-to-the-api-server</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="kubernetes"><![CDATA[kubernetes]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21215417899]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534605670]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>kubelet logs</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/19/kubelet-logs/</link>
  <pubDate>Sun, 19 Aug 2018 19:27:32 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=275</guid>
  <description/>
  <content:encoded><![CDATA[If your container won't start, and the events log isn't providing enough information, you may need to dig into the kubelet logs.  To do this, find which node you pod is running on using <span style="color:#008000;"><strong>kubectl get pods -o wide</strong></span>

Now log onto that node and run:
<pre><span class="contentBold">sudo j</span><span class="contentBold">o</span><span class="contentBold">u</span><span class="contentBold">r</span><span class="contentBold">n</span><span class="contentBold">a</span><span class="contentBold">l</span><span class="contentBold">c</span><span class="contentBold">t</span><span class="contentBold">l</span> <span class="contentBold">-</span><span class="contentBold">x</span> <span class="contentBold">-</span><span class="contentBold">u</span> <span class="contentBold">k</span><span class="contentBold">u</span><span class="contentBold">b</span><span class="contentBold">e</span><span class="contentBold">l</span><span class="contentBold">e</span><span class="contentBold">t</span> <span class="contentBold">-</span><span class="contentBold">-</span><span class="contentBold">n</span><span class="contentBold">o</span><span class="contentBold">-</span><span class="contentBold">p</span><span class="contentBold">a</span><span class="contentBold">g</span><span class="contentBold">e</span><span class="contentBold">r</span> <span class="contentBold">-</span><span class="contentBold">a</span> <span class="contentBold">|</span> <span class="contentBold">g</span><span class="contentBold">r</span><span class="contentBold">e</span><span class="contentBold">p</span> <span class="contentBold">&lt;</span><span class="contentBold">p</span><span class="contentBold">o</span><span class="contentBold">d</span> <span class="contentBold">n</span><span class="contentBold">a</span><span class="contentBold">m</span><span class="contentBold">e</span><span class="contentBold">&gt;</span></pre>
&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>275</wp:post_id>
  <wp:post_date>2018-08-19 19:27:32</wp:post_date>
  <wp:post_date_gmt>2018-08-19 19:27:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kubelet-logs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21250881589]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534706853]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>awk tips</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/19/awk-tips/</link>
  <pubDate>Sun, 19 Aug 2018 19:37:49 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=277</guid>
  <description/>
  <content:encoded><![CDATA[<strong>looping:</strong>
<pre>cat people.data | awk 'BEGIN{a=0} {printf("%d,%s\n", a++, $0);}'</pre>
&nbsp;

<strong>printing path elements:</strong>

assuming the path /one/two/three/four/five/foo.jar
<pre>find /one/two -name foo.jar | awk -F/ '{print $(NF-1)}'</pre>
Will output:
<pre>five</pre>

<hr />

&nbsp;

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>277</wp:post_id>
  <wp:post_date>2018-08-19 19:37:49</wp:post_date>
  <wp:post_date_gmt>2018-08-19 19:37:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>awk-tips</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21251109069]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534707470]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>git - authenticating to google cloud source repos</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/19/authenticating-to-google-cloud-source-repos/</link>
  <pubDate>Sun, 19 Aug 2018 19:58:02 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=283</guid>
  <description/>
  <content:encoded><![CDATA[edit your global git config as follows:
<pre>git config --global --edit</pre>
Add a credential entry as follows:
<pre>[credential]
  helper =
  helper = !gcloud auth git-helper --account=&lt;your email address&gt; --ignore-unknown $@</pre>
NOTE: Not sure why but this doesn't seem to work unless the first blank helper entry is present]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>283</wp:post_id>
  <wp:post_date>2018-08-19 19:58:02</wp:post_date>
  <wp:post_date_gmt>2018-08-19 19:58:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>authenticating-to-google-cloud-source-repos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21251552212]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534708683]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>split a tar archive</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/19/split-a-tar-archive/</link>
  <pubDate>Sun, 19 Aug 2018 20:09:02 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=287</guid>
  <description/>
  <content:encoded><![CDATA[<pre>split -b 2m node-v5.11.1-linux-x64.tar part_</pre>
Will produce:
<pre>part_aa
part_ab
part_ac
etc etc (in this case each file above will be 2MB in size)</pre>
Now concatenate the parts:
<pre>cat part*  &gt;  node-v5.11.1-linux-x64.tar</pre>
<strong>NOTE</strong>: if you run a file on one of the parts you can see details of the original file]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>287</wp:post_id>
  <wp:post_date>2018-08-19 20:09:02</wp:post_date>
  <wp:post_date_gmt>2018-08-19 20:09:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>split-a-tar-archive</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21251797679]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534709343]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>linux - quick group, user account and sudo setup</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/19/linux-quick-group-user-account-and-sudo-setup/</link>
  <pubDate>Sun, 19 Aug 2018 20:22:01 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=289</guid>
  <description/>
  <content:encoded><![CDATA[The following will
<ul>
	<li>create a group called ansible with a group ID of 30000</li>
	<li>create a group called devops with a group ID of 30001</li>
	<li>create the user ansible with a user ID of 30000 and a home directory of /home/ansible</li>
	<li>set ansible user's primary group to ansible and secondary group to devops</li>
	<li>set the password for the ansible user to London1</li>
	<li>add the devops group to sudoers</li>
</ul>
<pre>groupadd --gid 30000 ansible &amp;&amp; \
groupadd --gid 30001 devops &amp;&amp; \
useradd --uid 30000 ansible -m -g ansible --groups devops &amp;&amp; \
echo -e "London1\nLondon1" | passwd ansible &amp;&amp; \
echo "%devops        ALL=(ALL)       NOPASSWD: ALL" &gt; /etc/sudoers.d/10_devops</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>289</wp:post_id>
  <wp:post_date>2018-08-19 20:22:01</wp:post_date>
  <wp:post_date_gmt>2018-08-19 20:22:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>linux-quick-group-user-account-and-sudo-setup</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21252096004]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534710122]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Here documents (heredoc) tips</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/19/using-here-documents-with-sudo/</link>
  <pubDate>Sun, 19 Aug 2018 20:28:21 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=291</guid>
  <description/>
  <content:encoded><![CDATA[<pre>cat &lt;&lt;EOF &gt; config.props
url=http://stack1.com
component=123
name=config
timeout=10
EOF</pre>
<strong>Creates config.props with the contents:</strong>
url=http://stack1.com
component=123
name=config
timeout=10
<pre>tr [a-z] [A-Z] &lt;&lt; EOF
The cat sat on the mat
The cow jumped over the moon
EOF</pre>
<strong>Gives the output:</strong>
THE CAT SAT ON THE MAT
THE COW JUMPED OVER THE MOON

&nbsp;
<pre>cat &lt;&lt; END_TEXT | awk '{print $3 " " $2 " " $1}'
one two three 
three two one
END_TEXT</pre>
<strong>Gives the output:</strong>
three two one
one two three

&nbsp;
<pre>cat &lt;&lt;EOF | kubectl create -f -
apiVersion: v1
kind: Pod
metadata:
  name: test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh", "-c", "env" ]
      envFrom:
      - configMapRef:
          name: env-config
  restartPolicy: Never
EOF</pre>
Creates a kubernetes busybox Pod

&nbsp;
<h3>Using heredocs with sudo</h3>
example 1:
<pre>sudo bash -c "cat &gt;&gt; /etc/hosts" &lt;&lt; "EOF"
10.0.1.100  ansible
10.0.1.101  kube_controller
10.0.1.102  kube_node_1
10.0.1.103  kube_node_2
10.0.1.104  kube_node_3
EOF</pre>
example 2:
<pre>cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/influxdb.repo
[influxdb]
name = InfluxDB Repository - RHEL \$releasever
baseurl = https://repos.influxdata.com/rhel/\$releasever/\$basearch/stable
enabled = 1
gpgcheck = 1
gpgkey = https://repos.influxdata.com/influxdb.key
EOF</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>291</wp:post_id>
  <wp:post_date>2018-08-19 20:28:21</wp:post_date>
  <wp:post_date_gmt>2018-08-19 20:28:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-here-documents-with-sudo</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21252238158]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534710501]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>check TLS endpoint with mutual auth enabled</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/19/check-tls-endpoint-with-mutual-auth-enabled/</link>
  <pubDate>Sun, 19 Aug 2018 20:40:34 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=293</guid>
  <description/>
  <content:encoded><![CDATA[<pre>#!/bin/bash

script_path=$(dirname $0)
log_owner=jxadmin
log_group=wasadmin

apps=$(find /usr/websphere/liberty/*/*/wlp/usr/servers/myproject*/apps/expanded -name '*.war' | grep -v sample | awk -F/ '{print $(NF)}')

this_host=$(hostname -f)

for app in $apps

do

    path=$(find /usr/websphere/liberty/*/*/wlp/usr/servers/myproject*/apps/expanded -name $app)
    basepath=$(dirname $path)
    bootstrap_props=${basepath}/../../bootstrap.properties
    standard_overrides=${basepath}/../../configDropins/overrides/standard_overrides.xml
    https_port=$(cat $standard_overrides | grep httpPort | awk -FhttpsPort=\" '{print $2}' | cut -d \" -f 1)
    context_root=$(cat $bootstrap_props | grep context-root | cut -d = -f 2)
    log_dir=$(cat $bootstrap_props | grep applicationLogDir |grep -v \# | cut -d = -f 2)
    log_file=${log_dir}/check_endpoints.log
    touch $log_file
    chown ${log_owner}:${log_group} $log_file
    timestamp=$(date +%d/%h/%y_%H:%M:%S)
    {
        echo -e "${timestamp}\nAPP: ${app}\nPORT: $https_port\nCONTEXT ROOT: $context_root";
        echo -e "Requesting https://${this_host}:${https_port}${context_root}/info";
        curl -q -k https://${this_host}:${https_port}${context_root}/info --cert ${script_path}/cert.pem --key ${script_path}/key.pem;
        echo -e "\n";
    } &gt;&gt; $log_file 2&gt;&amp;1
done

</pre>
to extract the certs
<pre>/usr/websphere/his/java/8.0/jre/bin/ikeycmd  \
  -DADD_CMS_SERVICE_PROVIDER_ENABLED=true -cert -export -label \
  default -db plugin-key.kdb -stashed -target \
  /tmp/key.pkcs12 -target_pw password -target_type pkcs12</pre>
to convert to PEM format using openssl
<pre>openssl pkcs12 -in key.pkcs12 -clcerts -nodes &gt; all.pem</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>293</wp:post_id>
  <wp:post_date>2018-08-19 20:40:34</wp:post_date>
  <wp:post_date_gmt>2018-08-19 20:40:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>check-tls-endpoint-with-mutual-auth-enabled</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21252516356]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534711235]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>xargs stuff</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/19/edit-a-list-of-files-resulting-from-a-search-with-xargs/</link>
  <pubDate>Sun, 19 Aug 2018 20:42:20 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=295</guid>
  <description/>
  <content:encoded><![CDATA[Cleaning up kubernetes pods:
<pre>kubectl get pods | egrep 'brigade-vacuum' | awk '{print $1}' | xargs -n1 kubectl delete  pods</pre>
If you were searching recursively in the current directory for files containing the word test, and you wanted to edit each file you found with vi, the following command could be used:
<pre>grep -ilrw test * | xargs bash -c '&lt;/dev/tty vim "$@"' ignoreme</pre>
NOTE 1: the <strong>ignoreme</strong> is there to take up $0, so that $@ is all arguments from xargs

NOTE 2: it may have been easier to simply use:
<pre>grep -ilrw test * | xargs vi</pre>
However this messes up the terminal

<hr />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>295</wp:post_id>
  <wp:post_date>2018-08-19 20:42:20</wp:post_date>
  <wp:post_date_gmt>2018-08-19 20:42:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>edit-a-list-of-files-resulting-from-a-search-with-xargs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21252553642]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534711340]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>bash options parser</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/19/bash-options-parser/</link>
  <pubDate>Sun, 19 Aug 2018 20:56:24 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=303</guid>
  <description/>
  <content:encoded><![CDATA[<pre>#!/bin/bash
for i in "$@"
do
case $i in
    -p=*|--prefix=*)
    PREFIX="${i#*=}"
    ;;
 
    -s=*|--searchpath=*)
    SEARCHPATH="${i#*=}"
    ;;
 
    -l=*|--lib=*)
    DIR="${i#*=}"
    ;;
 
    --default)
    DEFAULT=YES
    ;;
 
    *)
    ;;
esac
done
echo PREFIX = ${PREFIX}
echo SEARCH PATH = ${SEARCHPATH}
echo DIRS = ${DIR}
echo DEFAULT = ${DEFAULT}</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>303</wp:post_id>
  <wp:post_date>2018-08-19 20:56:24</wp:post_date>
  <wp:post_date_gmt>2018-08-19 20:56:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>bash-options-parser</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21252853374]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534712185]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Redirect output from multiple lines (group) in a script</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/19/redirect-output-from-multiple-lines-group-in-a-script/</link>
  <pubDate>Sun, 19 Aug 2018 20:58:06 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=305</guid>
  <description/>
  <content:encoded><![CDATA[<pre>#/bin/bash
timestamp=$(date +%d/%h/%y_%H:%M:%S)
context_root=$1
https_port=31001
app="${1}-service"
status_code=$2
fake_host=$3
{
  echo -e "${timestamp}\nAPP: ${app}\nPORT: $https_port\nCONTEXT ROOT:      $context_root\nHTTP_STATUS_CODE: ${status_code}";
  echo -e "Requesting https://$(hostname):${https_port}${context_root}/info";
  echo '{ "userId": 1, "id": 1, "title": "testing", "completed": false }'
  echo -e "\n";
} &gt;&gt; /logs/curl 2&gt;&amp;1</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>305</wp:post_id>
  <wp:post_date>2018-08-19 20:58:06</wp:post_date>
  <wp:post_date_gmt>2018-08-19 20:58:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>redirect-output-from-multiple-lines-group-in-a-script</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21252888964]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534712286]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>curl tips</title>
  <link>https://devopsrunbook.wordpress.com/2018/08/19/curl-and-tls-mutual-client-auth/</link>
  <pubDate>Sun, 19 Aug 2018 21:03:31 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=307</guid>
  <description/>
  <content:encoded><![CDATA[<h3>TLS mutual/client auth</h3>
<pre>curl -k <a class="contentLink" href="https://10.1.1.101/" target="_blank" rel="noopener noreferrer">https://10.1.1.101</a> -v --cert ./cert.pem --key ./key.pem</pre>
<strong>NOTE</strong>: you need to specify the relative (./) or absolute paths to the pem files)
<h3>display information after a completed transfer</h3>
<pre>curl -w "dns_resolution: %{time_namelookup}, tcp_established: %{time_connect}\n" -o /dev/null -s "http://google.co.uk"</pre>
&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>307</wp:post_id>
  <wp:post_date>2018-08-19 21:03:31</wp:post_date>
  <wp:post_date_gmt>2018-08-19 21:03:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>curl-and-tls-mutual-client-auth</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21253010869]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1534712612]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://devopsrunbook.wordpress.com/?p=309</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=309</guid>
  <description/>
  <content:encoded><![CDATA[<pre>gghf</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>309</wp:post_id>
  <wp:post_date>2018-08-20 08:20:40</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Creating an ingress default cert manually with certbot</title>
  <link>https://devopsrunbook.wordpress.com/?p=342</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=342</guid>
  <description/>
  <content:encoded><![CDATA[An example:

This assumes you ingress controller's spec.containers.args element has a prop as follows:

&nbsp;
<ul class="Apple-dash-list">
	<li>sudo certbot certonly --manual -d *.stack1.com --agree-tos --manual-public-ip-logging-ok --preferred-challenges dns-01 --server https://acme-v02.api.letsencrypt.org/directory</li>
	<li>sudo cp -r /etc/letsencrypt/live/stack1.com /tmp &amp;&amp; cd /tmp</li>
	<li>sudo chown -R clarkeb:staff stack1.com</li>
	<li>cd stack1.com</li>
	<li>kubectl create secret tls wildcard-stack1-tls --key privkey.pem --cert fullchain.pem -n ingress</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>342</wp:post_id>
  <wp:post_date>2018-09-07 23:52:09</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Kubernetes nginx-ingress upload size</title>
  <link>https://devopsrunbook.wordpress.com/2018/09/10/kubernetes-nginx-ingress-upload-size/</link>
  <pubDate>Mon, 10 Sep 2018 10:06:33 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=345</guid>
  <description/>
  <content:encoded><![CDATA[This can be configured per Ingress resource using the <span style="color:#008080;"><strong>nginx.ingress.kubernetes.io/proxy-body-size</strong></span> annotation.

For example:
<pre>apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
<strong>    nginx.ingress.kubernetes.io/proxy-body-size: 150m</strong>
    certmanager.k8s.io/acme-challenge-type: dns01
    certmanager.k8s.io/acme-dns01-provider: azuredns
    certmanager.k8s.io/cluster-issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
</pre>
&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>345</wp:post_id>
  <wp:post_date>2018-09-10 10:06:33</wp:post_date>
  <wp:post_date_gmt>2018-09-10 10:06:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kubernetes-nginx-ingress-upload-size</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21986021453]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1536573994]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Kubernetes persistent volumes</title>
  <link>https://devopsrunbook.wordpress.com/2018/09/30/kubernetes-persistent-volumes/</link>
  <pubDate>Sun, 30 Sep 2018 00:29:35 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=351</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Basics:</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's assume we've just spun up a brand new cluster. The first thing we do is take a look at what storage classes we have available:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><strong>kubectl get sc
</strong>NAME                PROVISIONER                AGE
azurefile           kubernetes.io/azure-file   1d
default (default)   kubernetes.io/azure-disk   1d
managed-premium     kubernetes.io/azure-disk   1d</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Now let's list any persistent volumes. Given this is a new cluster there probably won't be any:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><strong>kubectl get pv
</strong>No resources found.</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>To spin up a pod with some persistent storage, first we need to create a PersistentVolumeClaim:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">cat &lt;&lt;EOF | kubectl create -f -
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: web-content
  namespace: web
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
EOF</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Let's check what Persistent Volumes and Persistent Volume Claims we have after running this:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><strong>kubectl get pv</strong>
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                             STORAGECLASS   REASON    AGE
pvc-9f39f84a-c447-11e8-a296-ee934e0ae766   3Gi        RWO            Delete           Bound     web/web-content           default                  2s


<strong>kubectl get pvc</strong>
NAME                  STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
web-content  Bound     pvc-9f39f84a-c447-11e8-a296-ee934e0ae766   3Gi        RWO            default        1m</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>Let's analyse what's happened here...<br></strong>We've created a PVC (i.e. a claim for a persistent volume), and we can see that listed when we run <strong>kubectl get pvc</strong>. However, a PV (the underlying Persistent Volume) has also been provisioned. How did this happen?<br>The best explanation I found was in the official k8s docs here: <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/">https://kubernetes.io/docs/concepts/storage/persistent-volumes/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's a summary<br><strong>Static</strong><br>A cluster administrator creates a number of PVs. They carry the details of the real storage which is available for use by cluster users. They exist in the Kubernetes API and are available for consumption.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Dynamic<br></strong>When none of the static PVs the administrator created matches a user’s PersistentVolumeClaim, the cluster may try to dynamically provision a volume specially for the PVC. This provisioning is based on StorageClasses: the PVC must request a storage class and the administrator must have created and configured that class in order for dynamic provisioning to occur. Claims that request the class "" effectively disable dynamic provisioning for themselves.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>So, how does a PVC know which PV to use in the absence of dynamic provisioning? <br></strong>See below for an explanation (also from the docs)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Selector<br>Claims can specify a label selector to further filter the set of volumes. Only the volumes whose labels match the selector can be bound to the claim. The selector can consist of two fields:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>matchLabels - the volume must have a label with this value<br>
matchExpressions - a list of requirements made by specifying key, list of values, and operator that relates the key and values. Valid operators include In, NotIn, Exists, and DoesNotExist.<br>
All of the requirements, from both matchLabels and matchExpressions are ANDed together – they must all be satisfied in order to match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now let's create a deployment to attach this claim to a volume and mount this volume inside a container. we'll also create a service to expose this deployment:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">cat &lt;&lt;EOF | kubectl create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: web
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      volumes:
      - name: web-content
        persistentVolumeClaim:
          claimName: web-content
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
        volumeMounts:
        - name: web-content
          mountPath: /usr/share/nginx/html
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nginx
  type: LoadBalancer
EOF 
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>When the pod is ready, exec into the container and create some content we want to persist in&nbsp;/usr/share/nginx/html.</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">kubectl exec nginx-68b97d6768-5h67q -it -- bash
cd /usr/share/nginx/html
echo "This is a persistence test on $(date)" &gt; index.html</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Now destroy the pod and start a new one using the same yaml as above. Once it's running, exec into it and you'll see the data you wrote from the first pod has been persisted.</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">kubectl exec nginx-91g11f6394-3g21h -it -- bash
cat /usr/share/nginx/html/index.html
This is a persistence test on Sun Sep 30 15:39:53 UTC 2018</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>Failing over to another node:</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's cordon and drain a node to see if our data is persisted to the moved pod. First, check which node the pod has been scheduled on, then cordon and drain that node:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">kubectl get pods  -o wide
NAME                     READY     STATUS    RESTARTS   AGE       IP          NODE                       NOMINATED NODE
nginx-68b97d6768-5h67q   1/1       Running   0          3m        10.0.1.38   aks-nodepool1-27870522-2   &lt;none&gt;

kubectl cordon aks-nodepool1-27870522-2
node/aks-nodepool1-27870522-2 cordoned

kubectl get nodes
NAME                       STATUS                     ROLES     AGE       VERSION
aks-nodepool1-27870522-0   Ready                      agent     2d        v1.11.2
aks-nodepool1-27870522-1   Ready                      agent     2d        v1.11.2
aks-nodepool1-27870522-2   Ready,SchedulingDisabled   agent     2d        v1.11.2

kubectl drain aks-nodepool1-27870522-2 --delete-local-data --ignore-daemonsets
pod/nginx-68b97d6768-5h67q evicted</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Once our pod is up and running on another node, exec into it and you'll see the data has been persisted.</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">kubectl exec nginx-91g11f6394-3g21h -it -- bash 
cat /usr/share/nginx/html/index.html 
This is a persistence test on Sun Sep 30 15:39:53 UTC 2018</pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>351</wp:post_id>
  <wp:post_date>2018-09-30 00:29:35</wp:post_date>
  <wp:post_date_gmt>2018-09-30 00:29:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kubernetes-persistent-volumes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1538267378]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22672862113]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Load testing Gitea</title>
  <link>https://devopsrunbook.wordpress.com/2018/09/30/load-testing-gitea/</link>
  <pubDate>Sun, 30 Sep 2018 21:36:12 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=358</guid>
  <description/>
  <content:encoded><![CDATA[This test will authenticate and download a single file

Number of requests: 500

Concurrency: 10
<pre>ab -n 500 -c 10 -A auth-username:password \
    https://gitea.stack1.com/testing/benchmarking/raw/branch/develop/package-lock.json</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>358</wp:post_id>
  <wp:post_date>2018-09-30 21:36:12</wp:post_date>
  <wp:post_date_gmt>2018-09-30 21:36:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>load-testing-gitea</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22700282335]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_562a20afcc45336c815be3884cb7cc10</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1538343372]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Terraform and GCP</title>
  <link>https://devopsrunbook.wordpress.com/?p=363</link>
  <pubDate>Sun, 21 Oct 2018 21:02:55 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=363</guid>
  <description/>
  <content:encoded><![CDATA[This article covers Terraform Modules, Workspaces, Dependancies and Outputs.

Before starting, you'll need to create a gcp project and create and configure a gcp service account for terraform to use with the following steps:

In the GCP console, create a new project by navigating to Select a project &gt; New project

Set the default google project for the gcloud cli:
<pre>gcloud config set project learning-terraform-01</pre>
&nbsp;

Next, Create service account for project for terraform can use by navigating to <strong>IAM &gt; Service Accounts &gt; Create service account</strong>

&nbsp;

Select a role (because this account will be used by terraform it will need permissions to create, modify and delete resources)

&nbsp;

Create a key

&nbsp;

Activate the service account using the key:
<pre>gcloud auth activate-service-account --key-file=/vagrant/learning-terraform-01-c22158178b5d.json</pre>
&nbsp;

Or, If you already have a service account, select it:
<pre>gcloud config set account terraform-access@learning-terraform-01.iam.gserviceaccount.com</pre>
&nbsp;

Now we're all set to start using Terraform.

As a starting point, let's create a gcp compute instance in the standard way (i.e no modules and using the default workspace)...

Create the following <strong>~/terraform/main.tf </strong>which enables a bunch of gcp services and then creates a compute instance.

Notice the <strong>depends_on</strong> in the google_compute_instance resource. This ensures that the google_project_services resource is added before terraform attempts to add the google_compute_instance resource:
<pre>resource "google_project_services" "main" {
  project  = "learning-terraform-01"
  services = [
      "cloudresourcemanager.googleapis.com",
      "cloudbuild.googleapis.com",
      "cloudapis.googleapis.com",
      "compute.googleapis.com",
      "container.googleapis.com",
      "containerregistry.googleapis.com",
      "deploymentmanager.googleapis.com"
  ]
}

resource "google_compute_instance" "instance01" {
  name         = "instance01"
  machine_type = "n1-standard-1"
  zone         = "us-central1-a"
  project      = "learning-terraform-01"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-9"
    }
  }

  network_interface {
    network = "default"
    access_config {
      // Ephemeral IP
    }
  }

  service_account {
    scopes = ["userinfo-email", "compute-ro", "storage-ro"]
  }
  depends_on = ["google_project_services.main"]
}</pre>
&nbsp;

Initialise terraform:
<pre>terraform init</pre>
&nbsp;

It might be useful to enable terraform debug (options are <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code> or <code>ERROR</code>)
<pre>export TF_LOG=TRACE</pre>
&nbsp;

Now check what's going to be built:
<pre>terraform plan</pre>
&nbsp;

If all looks good, build it
<pre>terraform apply --auto-approve</pre>
&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>363</wp:post_id>
  <wp:post_date>2018-10-21 21:02:55</wp:post_date>
  <wp:post_date_gmt>2018-10-21 21:02:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>terraform-and-gcp</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23437371919]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1540155776]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://devopsrunbook.wordpress.com/?p=372</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=372</guid>
  <description/>
  <content:encoded><![CDATA[<pre></pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>372</wp:post_id>
  <wp:post_date>2018-11-08 16:03:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Override entrypoint in docker compose</title>
  <link>https://devopsrunbook.wordpress.com/2018/11/24/override-entrypoint-in-docker-compose/</link>
  <pubDate>Sat, 24 Nov 2018 21:08:59 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=375</guid>
  <description/>
  <content:encoded><![CDATA[In the example below I'm overriding the entrypoint for the blakcbox exporter in order to add verbose logging
<div>
<pre>version:&nbsp;'3'
services:
&nbsp;&nbsp;prom:
&nbsp;&nbsp;&nbsp;&nbsp;build:&nbsp;./server
&nbsp;&nbsp;&nbsp;&nbsp;ports:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;"9090:9090"

&nbsp;&nbsp;blackbox:
&nbsp;&nbsp;&nbsp;&nbsp;build:&nbsp;./blackbox
&nbsp;&nbsp;&nbsp;&nbsp;ports:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;"9115:9115"
&nbsp;&nbsp;&nbsp;&nbsp;entrypoint:
&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;/bin/blackbox_exporter
&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;--config.file=/etc/blackbox_exporter/config.yml
&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;--log.level=debug

&nbsp;&nbsp;app:
&nbsp;&nbsp;&nbsp;&nbsp;build:&nbsp;./app
&nbsp;&nbsp;&nbsp;&nbsp;ports:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;"3000:3000"

&nbsp;&nbsp;grafana:
&nbsp;&nbsp;&nbsp;&nbsp;image:&nbsp;grafana/grafana
&nbsp;&nbsp;&nbsp;&nbsp;ports:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;"8000:3000"</pre>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>375</wp:post_id>
  <wp:post_date>2018-11-24 21:08:59</wp:post_date>
  <wp:post_date_gmt>2018-11-24 21:08:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>override-entrypoint-in-docker-compose</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24612553465]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1543093740]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Test</title>
  <link>https://devopsrunbook.wordpress.com/?p=378</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=378</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:preformatted -->
<pre class="wp-block-preformatted">adshasdhak</pre>
<!-- /wp:preformatted -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">Test</pre>
<!-- /wp:preformatted -->

<!-- wp:image {"id":379,"align":"right"} -->
<div class="wp-block-image"><figure class="alignright"><img src="https://devopsrunbook.files.wordpress.com/2018/11/internet.gif" alt="" class="wp-image-379" /></figure></div>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>FAkjalj</h2>
<!-- /wp:heading -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>378</wp:post_id>
  <wp:post_date>2018-11-24 21:11:06</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Foo</title>
  <link>https://devopsrunbook.wordpress.com/?p=381</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=381</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:code -->
<pre class="wp-block-code"><code>&lt;p&gt;Hello World&lt;/p&gt;</code></pre>
<!-- /wp:code -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>381</wp:post_id>
  <wp:post_date>2018-11-24 21:13:14</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Prometheus blackbox exporter</title>
  <link>https://devopsrunbook.wordpress.com/2018/11/25/prometheus-blackbox-exporter/</link>
  <pubDate>Sun, 25 Nov 2018 02:14:23 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=383</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I don't find the way the blackbox exporter config works intuitive. It could be that I'm doing things incorrectly but I have worked out how to get things to function how I need them to.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>In the following example I needed to parse HTML from a page and make sure it had the text I expected. For this I used the fail_if_not_matches_regexp function of the http prober.  </p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>What confused me was that I wasn't able to define the URL of the website I was probing in the blackbox exporter config even though this is where I was defining the regex. Instead the website URL is sent as a param. This being the case you end up linking the URL and the module that the regex is defined in as params.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>In the example below my target is&nbsp;https://www.ubuntu.com and my module is&nbsp;ubuntu within which I've set the regex (see yaml below)</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">http://localhost:9115/probe?target=https://www.ubuntu.com/&amp;module=ubuntu</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Here's the config file for this:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">modules:<br>&nbsp;&nbsp;wikipedia:<br>&nbsp;&nbsp;&nbsp;&nbsp;prober:&nbsp;http<br>&nbsp;&nbsp;&nbsp;&nbsp;timeout:&nbsp;5s<br>&nbsp;&nbsp;&nbsp;&nbsp;http:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail_if_not_matches_regexp:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;"Welcome&nbsp;to&nbsp;Wikipedia"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preferred_ip_protocol:&nbsp;"ip4"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valid_http_versions:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;"HTTP/1.1"&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;"HTTP/2"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method:&nbsp;GET<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tls_config:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insecure_skip_verify:&nbsp;true<br>&nbsp;&nbsp;ubuntu:<br>&nbsp;&nbsp;&nbsp;&nbsp;prober:&nbsp;http<br>&nbsp;&nbsp;&nbsp;&nbsp;timeout:&nbsp;5s<br>&nbsp;&nbsp;&nbsp;&nbsp;http:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail_if_not_matches_regexp:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;"Everything&nbsp;you&nbsp;need&nbsp;to&nbsp;know&nbsp;about&nbsp;Ubuntu"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preferred_ip_protocol:&nbsp;"ip4"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valid_http_versions:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;"HTTP/1.1"&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;"HTTP/2"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method:&nbsp;GET<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tls_config:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insecure_skip_verify:&nbsp;true</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>and here's the blackbox exporters log entry:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">ts=2018-11-24T21:24:37.6824918Z caller=main.go:174 module=ubuntu target=https://www.ubuntu.com/ level=debug msg="Probe succeeded" duration_seconds=0.2786691</pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>383</wp:post_id>
  <wp:post_date>2018-11-25 02:14:23</wp:post_date>
  <wp:post_date_gmt>2018-11-25 02:14:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>prometheus-blackbox-exporter</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24618447337]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1543112063]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Terraform</title>
  <link>https://devopsrunbook.wordpress.com/?p=391</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=391</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>391</wp:post_id>
  <wp:post_date>2018-12-02 14:16:28</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Terraform - outputs from disabled resources</title>
  <link>https://devopsrunbook.wordpress.com/2018/12/04/terraform-outputs-from-disabled-resources/</link>
  <pubDate>Tue, 04 Dec 2018 14:51:19 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=393</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A nice technique when using Terraform is to use modules that can be enabled or disabled depending on the requirements.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:block {"ref":396} /-->

<!-- wp:paragraph -->
<p>For example, consider the main.tf below</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">module "gke-network" {
  enabled                     = 1
  source                      = "modules/network"
  gcp_project                 = "${var.gcp_project}"
  network_name                = "${var.network_name}"
}

module "gke-cluster" {
  enabled                     = 1
  source                      = "modules/gke"
  cluster_name                = "${var.cluster_name}"
  gcp_region                  = "${var.gcp_region}"
  gcp_zone                    = "${var.gcp_zone}"
  gcp_project                 = "${var.gcp_project}"
  k8s_user                    = "${var.k8s_user}"
  k8s_password                = "${var.k8s_password}"
  k8s_min_nodes               = "${var.k8s_min_nodes}"
  network_name                = "${module.gke-network.network_name == "" ? "default" : module.gke-network.network_name}"
}</pre>
<!-- /wp:preformatted -->

<!-- wp:block {"ref":396} /-->

<!-- wp:paragraph -->
<p>As can be seen, we're passing the new variable "enabled" and setting it to 1. The module code for gke-network looks like this</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">resource "google_compute_network" "db_network" {
  count                     = "${var.enabled}"
  name                      = "${var.network_name}"
  auto_create_subnetworks   = "true"
  project                   = "${var.gcp_project}"
}

output "network_name" {
  value                     = "${join("", google_compute_network.db_network.*.name)}"
}</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>You'll notice <strong>count</strong> has been added.&nbsp; This allows us to use the <strong>splat</strong> syntax for the network outputs (i.e because we've added count to the reource, terraform knows that&nbsp;google_compute_network.db_network will need to be an array). </p>
<!-- /wp:paragraph -->

<!-- wp:block {"ref":396} /-->

<!-- wp:paragraph -->
<p>So&nbsp;google_compute_network.db_network now becomes&nbsp;google_compute_network.db_network[n] or in terraform syntax&nbsp;google_compute_network.db_network.n.</p>
<!-- /wp:paragraph -->

<!-- wp:block {"ref":396} /-->

<!-- wp:paragraph -->
<p>This means we can substitute n with a wildcard (*)&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:block {"ref":396} /-->

<!-- wp:paragraph -->
<p>Therefore,&nbsp; even when we disable gke-network by setting <strong>enabled</strong> to 0 in main.tf, terraform won't complain as it would do if we had used&nbsp;google_compute_network.db_network.0.name (i.e. because we would be referring to something that doesn't exist. Not sure why but when we use a wildcard terraform let's us get away with this fact.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:block {"ref":396} /-->

<!-- wp:paragraph -->
<p>Obviously the output would be blank and the consuming module would need to deal with this - I've shown an example using a conditional.</p>
<!-- /wp:paragraph -->

<!-- wp:block {"ref":396} /-->

<!-- wp:paragraph -->
<p>NOTE: the join there because the expected output is a string as opposed to an array.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>393</wp:post_id>
  <wp:post_date>2018-12-04 14:51:19</wp:post_date>
  <wp:post_date_gmt>2018-12-04 14:51:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>terraform-outputs-from-disabled-resources</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24954718850]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1543935079]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Terraform - build a GKE Kubernetes cluster</title>
  <link>https://devopsrunbook.wordpress.com/?p=403</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=403</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Assumptions:<br></strong>- You have the gcloud CLI installed and configured <br>- You have a GCP project set up<br>- You've logged in via gcloud (gcloud auth login) as an admin user</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Create a service account:</h4>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>gcloud iam service-accounts create terraform-learning-sa</code></pre>
<!-- /wp:code -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>403</wp:post_id>
  <wp:post_date>2018-12-06 23:54:29</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="kubernetes"><![CDATA[kubernetes]]></category>
  <category domain="post_tag" nicename="terraform"><![CDATA[terraform]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Terraform IF/ELSE</title>
  <link>https://devopsrunbook.wordpress.com/2019/01/05/terraform-if-statement/</link>
  <pubDate>Sat, 05 Jan 2019 18:36:08 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=409</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The following checks the value of  ${module.gke-network.network_name}, if it's an empty string it assigns the network_name variable a value of "default" else if it's not an empty string it assigns the value of ${module.gke-network.network_name} to the network_name variable</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">network_name = "${module.gke-network.network_name} == "" ? "default" : module.gke-network.network_name}"</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>This is quite handy as it's saying "if I have set a value for ${module.gke-network.network_name} then use that value, if not just use the string "default"</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>409</wp:post_id>
  <wp:post_date>2019-01-05 18:36:08</wp:post_date>
  <wp:post_date_gmt>2019-01-05 18:36:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>terraform-if-statement</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[26208148491]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1546713368]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Terraform outputs</title>
  <link>https://devopsrunbook.wordpress.com/?p=418</link>
  <pubDate>Sat, 23 Mar 2019 15:15:49 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=418</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Let's say I'm building a GKE Cluster.  If the Terraform module I write for this, I may want to capture the endpoint of the K8s API. So I check the terraform docs and in the attributes section I see the following :</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<div class="div.foo"><figure class="aligncenter"><figure><figure><img src="https://devopsrunbook.files.wordpress.com/2019/03/image.png" alt="" class="wp-image-419"></figure></figure></figure></div>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>To capture this attribute and store it in my terraform state I need to use an Output as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":420,"width":502,"height":69} -->
<figure class="wp-block-image is-resized"><img src="https://devopsrunbook.files.wordpress.com/2019/03/image-1.png" alt="" class="wp-image-420" width="502" height="69" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The value of this output will be computed and will end up in my terraform state (see below):</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":422,"width":494,"height":564} -->
<figure class="wp-block-image is-resized"><img src="https://devopsrunbook.files.wordpress.com/2019/03/image-2.png" alt="" class="wp-image-422" width="494" height="564" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>418</wp:post_id>
  <wp:post_date>2019-03-23 15:15:49</wp:post_date>
  <wp:post_date_gmt>2019-03-23 15:15:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>terraform-outputs</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1553354151]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28958428904]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Providing values for a Terraform helm_release</title>
  <link>https://devopsrunbook.wordpress.com/2019/03/23/terraform-helm_release/</link>
  <pubDate>Sat, 23 Mar 2019 22:42:03 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=444</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>There are multiple ways to provide values for a helm chart when using the helm terraform provider. Three examples are show below (highlighted in red): the first pointing at a file, the second using a Here Doc, the third using a Terraform set.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>NOTE</strong>: the &lt;&lt;- syntax removes whitespace whereas using the &lt;&lt; syntax (no "-") does not</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">resource "helm_release" "brigade" {
    count          = "${var.enabled}"
    name           = "brigade"
    namespace      = "${var.namespace}"
    chart          = "brigade"
   <strong class="redtext">
    values         = ["${file("${path.module}/config/values.yaml")}"]</strong>

   <strong class="redtext"> values         = [
        &lt;&lt;-EOF
        brigade-github-app:
          enabled: true
        EOF
    ]</strong>

<strong class="redtext">    set{
        name       = "brigade-github-app.enabled"
        value      = "true"
    }
</strong>

    provisioner "local-exec" {
    command       = "echo ${var.helm_init_id}"
    
    }
}
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>444</wp:post_id>
  <wp:post_date>2019-03-23 22:42:03</wp:post_date>
  <wp:post_date_gmt>2019-03-23 22:42:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>terraform-helm_release</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28969002674]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1553380925]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Terraform from scratch</title>
  <link>https://devopsrunbook.wordpress.com/2019/03/30/terraform-from-scratch/</link>
  <pubDate>Sat, 30 Mar 2019 21:19:12 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=474</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this post I will go through how to write a simple terraform module to install a Kubernetes GKE cluster.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>pre reqs:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>A GCP account
</li><li>Terraform&nbsp;v0.11.11
</li><li>gcloud CLI
</li><li>kubectl&nbsp;
</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Set up GCP project and service&nbsp;account:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the GCP console create a new google project. Login with the cloud CLI </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">gcloud auth login</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>

Switch to your newly created project
</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">gcloud config set project your-gcp-project </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Create a service account </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">gcloud iam service-accounts create your-gcp-project-sa </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>

Link this service account to your project
</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">gcloud projects add-iam-policy-binding your-terraform-project \ <br>&nbsp;&nbsp;--member “serviceAccount:your-gcp-project-sa@your-gcp-project.iam.gserviceaccount.com" \ <br> &nbsp;--role "roles/owner" <br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Create and download a private key for this service account (Terraform will use this to authenticate to your gcp project) </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">gcloud iam service-accounts keys create “/path/you/choose/your-terraform-project-sa.json" \ <br>&nbsp;&nbsp;&nbsp;--iam-account "your-gcp-project-sa@your-gcp-project.iam.gserviceaccount.com" </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>Set up backend for remote terraform state&nbsp;</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Create a bucket to store terraform state </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">gsutil mb -l eu gs://your-gcp-project-remote-state</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>

Create a file named backend.tf and add the following to set up the google terraform provider&nbsp;
</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">terraform { <br>&nbsp;&nbsp;backend "gcs" { <br>&nbsp;&nbsp;&nbsp;&nbsp;bucket&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= "your-gcp-project-remote-state" <br>&nbsp;&nbsp;&nbsp;&nbsp;prefix&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= "terraform" <br>&nbsp;&nbsp;&nbsp;&nbsp;project&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= "your-gcp-project" <br>&nbsp;&nbsp;&nbsp;&nbsp;credentials&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= "/path/you/choose/your-gcp-project-sa.json" <br>&nbsp;&nbsp;} <br>} </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Initialise the backend</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"> terraform init</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>This should result in something similar to the following:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":486} -->
<figure class="wp-block-image"><img src="https://devopsrunbook.files.wordpress.com/2019/04/image.png" alt="" class="wp-image-486" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>

Check that the remote state has been initialised (note - we’re not using workspaces yet therefore we’re working in the default workspace)&nbsp;
</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">gsutil cat gs://your-gcp-project-remote-state/terraform/default.tfstate </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>

This resulting display should be something similar to:
</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">{ <br>&nbsp;&nbsp;&nbsp;&nbsp;"version": 3, <br>&nbsp;&nbsp;&nbsp;&nbsp;"serial": 1, <br>&nbsp;&nbsp;&nbsp;&nbsp;"lineage": "2c1eae35-87b7-8d2a-556a-09ab57d0bff7", <br>&nbsp;&nbsp;&nbsp;&nbsp;"modules": [ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"path": [ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"root" <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;], <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"outputs": {}, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"resources": {}, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"depends_on": [] <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;] <br>} </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>Set up the Google provider:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Create a file named providers.tf with the following contents: </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">provider "google" { <br>&nbsp;&nbsp;project&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= “your-gap-project" <br>&nbsp;&nbsp;region&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= "europe-west2" <br>&nbsp;&nbsp;zone&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= "europe-west2-a" <br>&nbsp;&nbsp;credentials&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= "${file(“/path/you/choose/your-gcp-project-sa.json")}" <br>} </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>

Initialise the provider:
</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">terraform init</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>This should result in something similar to the following output: </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":487} -->
<figure class="wp-block-image"><img src="https://devopsrunbook.files.wordpress.com/2019/04/image-1.png" alt="" class="wp-image-487" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>Enable the container.googleapis.com API Service:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">gcloud services enable container.googleapis.com</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>We’re now ready to start building stuff - let’s use terraform modules to do this as they are pretty cool&nbsp; </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Create your first Terraform module:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Create a directory called modules and under here create a directory called kubernetes_cluster (yes - we’re going to write a module to deploy a k8s cluster 🙂) cd to modules/kubernetes_cluster and create a file named k8s_main.tf </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">mkdir -p modules/kubernetes_cluster <br>cd modules/kubernetes_cluster <br>touch k8s_main.tf</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Add the following contents to&nbsp;&nbsp;k8s_main.tf (Notice we’re not using any variables at the moment, this will come later) </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">resource "google_container_cluster" "k8s_cluster" { <br>&nbsp;&nbsp;count&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= "1" <br>&nbsp;&nbsp;name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= "terraform-from-scratch-k8s-cluster" <br>&nbsp;&nbsp;zone&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= "europe-west2-a" <br>&nbsp;&nbsp;initial_node_count = "3" <br>&nbsp;&nbsp;project&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= "terraform-from-scratch" <br><br><br><br><br>&nbsp;&nbsp;node_config { <br>&nbsp;&nbsp;&nbsp;&nbsp;oauth_scopes = [ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"https://www.googleapis.com/auth/compute", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"https://www.googleapis.com/auth/devstorage.read_only", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"https://www.googleapis.com/auth/logging.write", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"https://www.googleapis.com/auth/monitoring", <br>&nbsp;&nbsp;&nbsp;&nbsp;] <br>&nbsp;&nbsp;} <br>} </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Now we need to call this module. To do this cd back up to your top level directory (where backend.tf and providers.tf reside) and create main.tf with the following contents. </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">module "kubernetes-cluster" { <br>&nbsp;&nbsp;source = "modules/kubernetes_cluster" <br>}</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Initialise the new module: </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">terraform init</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Plan the build</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">terraform plan<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>If all looks well, run the build&nbsp; </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">terraform apply -auto-approve</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Update ~/.kube/config and set context to your new kubernetes cluster&nbsp; </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">gcloud container clusters get-credentials your-gcp-project-k8s-cluster</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Check connectivity&nbsp; </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">kubectl get pods -n kube-system </pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>474</wp:post_id>
  <wp:post_date>2019-03-30 21:19:12</wp:post_date>
  <wp:post_date_gmt>2019-03-30 21:19:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>terraform-from-scratch</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="kubernetes"><![CDATA[kubernetes]]></category>
  <category domain="post_format" nicename="post-format-image"><![CDATA[Image]]></category>
  <category domain="post_tag" nicename="terraform"><![CDATA[terraform]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29218212271]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1553980756]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Get the egress address of a Kubernetes cluster</title>
  <link>https://devopsrunbook.wordpress.com/2019/04/01/get-the-egress-address-of-a-kubernetes-cluster/</link>
  <pubDate>Mon, 01 Apr 2019 17:49:45 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=491</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>use kubectl to exec into a pod </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">kubectl exec -it &lt;pod name&gt; -n &lt;namespace&gt; -- /bin/sh</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Run the following command from with a pod</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">curl http://ifconfig.co</pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>491</wp:post_id>
  <wp:post_date>2019-04-01 17:49:45</wp:post_date>
  <wp:post_date_gmt>2019-04-01 17:49:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>get-the-egress-address-of-a-kubernetes-cluster</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29283101127]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1554140988]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>View Kubenetes events in time order</title>
  <link>https://devopsrunbook.wordpress.com/2019/04/01/view-kubenetes-events-in-time-order/</link>
  <pubDate>Mon, 01 Apr 2019 17:51:26 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=494</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:preformatted -->
<pre class="wp-block-preformatted">kubectl get events --sort-by='{.lastTimestamp}' -n &lt;namespace&gt;</pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>494</wp:post_id>
  <wp:post_date>2019-04-01 17:51:26</wp:post_date>
  <wp:post_date_gmt>2019-04-01 17:51:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>view-kubenetes-events-in-time-order</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29283151680]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1554141089]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Terraform - breaking down complex interpolations into steps</title>
  <link>https://devopsrunbook.wordpress.com/2019/04/10/terraform-breaking-down-complex-interpolations-into-steps/</link>
  <pubDate>Wed, 10 Apr 2019 17:40:59 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=497</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>If you're like me, and find it arduous to read long strings of characters without getting a headache, you can break down nested Terraform interpolations like this:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">locals {
  connection_string = "${join("", azurerm_eventhub_namespace.eventhub-ns.*.default_primary_connection_string)}"
  connection_string_array = "${split(";", local.connection_string)}"
  endpoint_def = "${element(local.connection_string_array,0)}"
  endpoint_array = "${split("=",local.endpoint_def)}"
  endpoint = "${element(local.endpoint_array, 1)}"
}</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Now you can go ahead and use ${local.endpoint} in your terraform module in the usual manner.</p>
<!-- /wp:paragraph -->

<!-- wp:block {"ref":396} /-->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>497</wp:post_id>
  <wp:post_date>2019-04-10 17:40:59</wp:post_date>
  <wp:post_date_gmt>2019-04-10 17:40:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>terraform-breaking-down-complex-interpolations-into-steps</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="terraform"><![CDATA[terraform]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29616120783]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1554918063]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Writing json to vault via the vault cli</title>
  <link>https://devopsrunbook.wordpress.com/2019/04/12/writing-json-to-vault-via-the-vault-cli/</link>
  <pubDate>Fri, 12 Apr 2019 19:13:21 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=537</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>To read data from vault</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">vault read secret/my_data<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>This will display something like </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">Key                    Value<br> ---                    -----<br> refresh_interval       768h<br> client_namespaces      dummy1,dummy2,dummy3<br> enabled                1<br> env_tag                NonProduction<br> event_hub_namespace    dummy-eventhub<br> message_retention      1<br> partition_count        3<br> version                0.0.1</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>To display in json format</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">vault read --format=json secret/my_data</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Which will display </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">{<br>   "request_id": "3636eda1-c052-eb0c-b1c6-3bfff43d86e3",<br>   "lease_id": "",<br>   "lease_duration": 2764800,<br>   "renewable": false,<br>   "data": {<br>     "client_namespaces": "dummy1,dummy2,dummy3",<br>     "enabled": "1",<br>     "env_tag": "NonProduction",<br>     "event_hub_namespace": "dummy-eventhub",<br>     "message_retention": "1",<br>     "partition_count": "3",<br>     "version": "0.0.1"<br>   },<br>   "warnings": null<br> }</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>You can dump the data section to a file...</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">vault read --format=json secret/my_data | jq .data &gt; my_data.json</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>This will dump the following to a my_data.json</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">{<br>   "client_namespaces": "dummy1,dummy2,dummy3",<br>   "enabled": "1",<br>   "env_tag": "NonProduction",<br>   "event_hub_namespace": "dummy-eventhub",<br>   "message_retention": "1",<br>   "partition_count": "3",<br>   "version": "0.0.1"<br> }</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Edit this to suit your needs and write to back to vault as follows...</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">vault write secret/my_data @my_data.json</pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>537</wp:post_id>
  <wp:post_date>2019-04-12 19:13:21</wp:post_date>
  <wp:post_date_gmt>2019-04-12 19:13:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>writing-json-to-vault-via-the-vault-cli</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="vault"><![CDATA[vault]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29695149575]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1555096403]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>57</wp:comment_id>
    <wp:comment_author><![CDATA[excellent.tnfsh.tn.edu.tw]]></wp:comment_author>
    <wp:comment_author_email>magnolia.gibson@t-online.de</wp:comment_author_email>
    <wp:comment_author_url>http://excellent.tnfsh.tn.edu.tw:8080/phpinfo.php?a%5B%5D=Agen+SBOBET+%28%3Ca+href%3Dhttp%3A%2F%2Fsbobet369.vip%3Ehttp%3A%2F%2Fsbobet369.vip%2F%3C%2Fa%3E%29</wp:comment_author_url>
    <wp:comment_author_IP>104.144.93.17</wp:comment_author_IP>
    <wp:comment_date>2019-12-02 13:31:15</wp:comment_date>
    <wp:comment_date_gmt>2019-12-02 13:31:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ed Rendell said these casinos would do away with property taxes!!

Were still waiting fast Eddie!!]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1575298138.296694;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1575293475.998837;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Making sure that persistence is working correctly on your k8s cluster</title>
  <link>https://devopsrunbook.wordpress.com/?p=567</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=567</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The Postgres Helm chart is an easy way to check this:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">helm install --name test-postgres stable/postgresql --set persistence.enabled=true --namespace test</pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>567</wp:post_id>
  <wp:post_date>2019-04-13 17:31:36</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>PromQL basics</title>
  <link>https://devopsrunbook.wordpress.com/?p=572</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=572</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Assuming you've just got Prometheus up and running and you're looking at something like this:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":573,"width":447,"height":488} -->
<figure class="wp-block-image is-resized"><img src="https://devopsrunbook.files.wordpress.com/2019/04/image-2.png" alt="" class="wp-image-573" width="447" height="488" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The first very simple query you can make is "up"... i.e. type the word "up" in the expression box. You should see something like the following:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":575,"width":450,"height":424} -->
<figure class="wp-block-image is-resized"><img src="https://devopsrunbook.files.wordpress.com/2019/04/image-3.png" alt="" class="wp-image-575" width="450" height="424" /></figure>
<!-- /wp:image -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>572</wp:post_id>
  <wp:post_date>2019-04-27 22:46:32</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Brigade CI setup</title>
  <link>https://devopsrunbook.wordpress.com/2019/06/15/brigade-setup/</link>
  <pubDate>Sat, 15 Jun 2019 20:55:07 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=580</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>Pre-reqs</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>K8s cluster with RBAC enabled </li><li>Helm installed with Tiller using a service account (see Helm set up step  below)</li><li>brig cli</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3><br>Helm set up</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">kubectl -n kube-system create sa tiller
kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
helm init --service-account tiller</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3><br>Install brigade</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">helm repo add brigade https://brigadecore.github.io/charts
helm install --name brigade-server brigade/brigade --namespace ci --set gw.enabled=true</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3><br>Generate a values file for a brigade project </h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">helm inspect values brigade/brigade-project &gt; values.yaml </pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3><br>Customise the values file</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You'll notice that the helm inspect command generates alot of output. This can be cut down to something like the following:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">project: "bobclarke/gowiki"
repository: "github.com/bobclarke/gowiki"
cloneURL: "https://github.com/bobclarke/gowiki"
sharedSecret: "IBrakeForSeaBeasts"
github:
&nbsp;&nbsp;&nbsp;token: "github oauth token"
allowPrivilegedJobs: “true"

secrets:
&nbsp; username: jsmith
  password: mypassword</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><br>In practice, you'll probably want to split this into two files (let's call them values.yaml and secret-values.yaml), one of them for sensitive information that you'll want to exclude from Git.. </p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<span style="color:#429DDB;font-weight:bold;font-size:15px;">values.yaml</span>
<pre class="wp-block-preformatted">project: "bobclarke/gowiki"
repository: "github.com/bobclarke/gowiki"
cloneURL: "https://github.com/bobclarke/gowiki"
github:
&nbsp;&nbsp;&nbsp;token: "github oauth token"
allowPrivilegedJobs: “true"</pre>
<!-- /wp:html -->

<!-- wp:html -->
<span style="color:#429DDB;font-weight:bold;font-size:15px;">secret-values.yaml</span>
<pre class="wp-block-preformatted">sharedSecret: IBrakeForSeaBeasts
secrets:
&nbsp; username: jsmith
  password: mypassword</pre>
<!-- /wp:html -->

<!-- wp:heading {"level":3} -->
<h3><br>Create brigade project</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">helm install -n my-project brigade/brigade-project -f values.yaml -f secret-values.yaml  —namespace ci</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3><br>Check the brigade project</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">brig project list -n ci
brig project get &lt;project name&gt; -n ci</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3><br>Get the public IP of the brigade gateway service</h3>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">kubectl get svc -n ci</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3><br>Set up a webhook</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Navigate to https://github.com/&lt;org&gt;/&lt;repo&gt;/settings/hooks</li><li>Click "add webhook"</li><li>Set content type to "application/json"</li><li>Set payload url to "http://&lt;gw svc address&gt;:7744/events/github"</li><li>Set secret to the sharedSecret value in your secret-values.yaml (for example "IBrakeForSeaBeasts")</li></ul>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>580</wp:post_id>
  <wp:post_date>2019-06-15 20:55:07</wp:post_date>
  <wp:post_date_gmt>2019-06-15 20:55:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>brigade-setup</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="brigade"><![CDATA[brigade]]></category>
  <category domain="post_tag" nicename="ci"><![CDATA[ci]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1560719856]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[31893081214]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>test</title>
  <link>https://devopsrunbook.wordpress.com/?p=593</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=593</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:html /-->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>593</wp:post_id>
  <wp:post_date>2019-06-15 21:16:12</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Bash tips</title>
  <link>https://devopsrunbook.wordpress.com/?p=680</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=680</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>One liner bash condition checking</h2>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">[ $# -eq 1 ] || { echo "Expecting one argument"; exit 1; }</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>You can also use this technique directly on the command line, for example </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">[ -f myFile ] || echo "file not found"</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><br>Options parser</h2>
<!-- /wp:heading -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code brush: bash; notranslate">#!/bin/bash
for i in "$@"
do
case $i in
    -p=*|--prefix=*)
    PREFIX="${i#*=}"
    ;;
 
    -s=*|--searchpath=*)
    SEARCHPATH="${i#*=}"
    ;;
 
    -l=*|--lib=*)
    DIR="${i#*=}"
    ;;
 
    --default)
    DEFAULT=YES
    ;;
 
    *)
    ;;
esac
done
echo PREFIX = ${PREFIX}
echo SEARCH PATH = ${SEARCHPATH}
echo DIRS = ${DIR}
echo DEFAULT = ${DEFAULT}</pre>
<!-- /wp:syntaxhighlighter/code -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>680</wp:post_id>
  <wp:post_date>2019-06-20 21:50:56</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Learning Go</title>
  <link>https://devopsrunbook.wordpress.com/?p=742</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=742</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I wanted to teach myself GoLang so I thought up a useful tool that I could use in my daily job. I decided to write a tool that would allow me to test connections to common systems such as databases and messaging systems etc. <br>The requirements are as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Must be able to run inside a Kubernetes cluster (i.e so that I can test services hosted in the cluster that are not exposed outside the cluster) </li><li>Must be be able to run in CLI mode or Browser mode</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Whilst learning Go I also wanted to follow proper testing procedure. I'm follow TDD by writing tests first (sort of) plus I'm making sure testing is automated by implementing an event driven CI pipeline. The CI server I'm using for this is Concourse. <a href="https://concourse-ci.org/">(https://concourse-ci.org/</a>)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a starting point to get me going I'm following an excellent Golang webapp tutorial I found written by a chap called <strong>Soham Kamani</strong>. You can find the tutorial here (<a href="https://www.sohamkamani.com/blog/2017/09/13/how-to-build-a-web-application-in-golang/">https://www.sohamkamani.com/blog/2017/09/13/how-to-build-a-web-application-in-golang/</a>)</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Go Testing</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <strong>go test</strong> command will look for any files in the same directory  as your source code with a filename of <strong>*_test.go</strong>.  Inside these files, individual tests are defines as functions with the signature <strong>func Test&lt;something&gt; (t *testing.T)</strong><br>For example:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">package main

import (
    "io/ioutil"
    "net/http"
    "net/http/httptest"
    "testing"
)

func TestRouter(t *testing.T) {
    r := getRouter()
    mockServer := httptest.NewServer(r)
    resp, err := http.Get(mockServer.URL + "/hello")

    if err != nil {
        t.Fatal(err)
    }
    if resp.StatusCode != http.StatusOK {
        t.Errorf("Status should be ok, got %d", resp.StatusCode)
    }

    defer resp.Body.Close()
    b, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        t.Fatal(err)
    }

    respString := string(b)
    expected := "Hello World!"

    if respString != expected {
        t.Errorf("Response should be %s, got %s", expected, respString)
    }
}</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>Setting up Concourse CI server</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There a few options for running Concourse which you can find details of here ( <a href="https://concourse-ci.org/">https://concourse-ci.org/</a>). I'm using the Docker Compose option. My docker-compose.yml file is below (you can also download this by running curl -k  https://concourse-ci.org/docker-compose.yml -o docker-compose.yml)</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"> version: "3"
 services:
   concourse-db:
     image: postgres
     environment:
       - POSTGRES_DB=concourse
       - POSTGRES_PASSWORD=concourse_pass
       - POSTGRES_USER=concourse_user
       - PGDATA=/database
 concourse:
     image: concourse/concourse:4.2.1
     command: quickstart
     privileged: true
     depends_on: [concourse-db]
     ports: ["8080:8080"]
     environment:
       - CONCOURSE_POSTGRES_HOST=concourse-db
       - CONCOURSE_POSTGRES_USER=concourse_user
       - CONCOURSE_POSTGRES_PASSWORD=concourse_pass
       - CONCOURSE_POSTGRES_DATABASE=concourse
       - CONCOURSE_EXTERNAL_URL
       - CONCOURSE_ADD_LOCAL_USER=admin:admin
       - CONCOURSE_MAIN_TEAM_LOCAL_USER=admin</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Bring the Concourse server up by running docker-compose up -d, start a browser and and then navigate to <a href="http://localhost:8080/">http://localhost:8080/</a>. You should see the concourse home page </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":751} -->
<figure class="wp-block-image"><img src="https://devopsrunbook.files.wordpress.com/2019/08/image-2.png?w=800" alt="" class="wp-image-751" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Concourse is administered using the <strong>fly CLI</strong>, you can download this for your OS by clicking the relevant icon on the bottom left of the Concourse home page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now log into concourse using the username and password specified in your docker-compose.yml file (admin/admin in the example above) </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first thing you'll need to do is set up a pipeline. This is done via the fly CLI as follows</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">fly login -t local-concourse -c <a href="http://localhost:8080/">http://localhost:8080</a> -u admin -p admin </pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>742</wp:post_id>
  <wp:post_date>2019-08-29 17:58:52</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>General purpose admin GUI for relational databases</title>
  <link>https://devopsrunbook.wordpress.com/2019/08/30/general-purpose-admin-gui-for-relational-databases/</link>
  <pubDate>Fri, 30 Aug 2019 19:09:04 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=756</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:block {"ref":396} /-->

<!-- wp:heading {"level":3} -->
<h3>Bring up Postgres and Adminer</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here's a docker-compose.yml file to use for this </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">version: '3.1' 
services:

&nbsp; db: 
&nbsp;&nbsp;&nbsp; image: postgres 
&nbsp;&nbsp;&nbsp; restart: always 
&nbsp;&nbsp;&nbsp; environment: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; POSTGRES_PASSWORD: example 

&nbsp; adminer: 
&nbsp;&nbsp;&nbsp; image: adminer 
&nbsp;&nbsp;&nbsp; restart: always 
&nbsp;&nbsp;&nbsp; ports: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 8080:8080 </pre>
<!-- /wp:preformatted -->

<!-- wp:block {"ref":396} /-->

<!-- wp:heading {"level":3} -->
<h3> Now point a browser at localhost:8080</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":757} -->
<figure class="wp-block-image"><img src="https://devopsrunbook.files.wordpress.com/2019/08/image-3.png?w=800" alt="" class="wp-image-757" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If we want to populate the database we can modify our docker-compose.yml file as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">version: '3.1'
 services:
 db:
     image: postgres
     restart: always
     environment:
       POSTGRES_PASSWORD: example
     volumes:
     - ./createdb.sql:/docker-entrypoint-initdb.d/createdb.sql
 adminer:
     image: adminer
     restart: always
     ports:
       - 9000:8080</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Our createdb.sql file could look like this:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">CREATE DATABASE bird_encyclopedia;
 \c bird_encyclopedia
 CREATE TABLE birds (
   id SERIAL PRIMARY KEY,
   bird VARCHAR(256),
   description VARCHAR(1024)
 );</pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>756</wp:post_id>
  <wp:post_date>2019-08-30 19:09:04</wp:post_date>
  <wp:post_date_gmt>2019-08-30 19:09:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>general-purpose-admin-gui-for-relational-databases</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
  <category domain="post_tag" nicename="postgres"><![CDATA[postgres]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[34755683873]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1567192146]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Golang Receivers - what the heck!</title>
  <link>https://devopsrunbook.wordpress.com/?p=766</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=766</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I spend a few days being pretty confused about Golang receivers. I finally worked it out and wanted to share what I learned.<br><br>The following commented code will probably explain things pretty well so take a look. </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">package main

import "fmt"

// Define the Database type
type Database struct {
   DBLogin    string
   DBPassword string
   DBName     string
   DBHost     string
   DBPort     int64
   DBTables   []string
}

func main() {

   // Create an empty databse "instance"
   database := &amp;Database{}
 
   // Set the database credentials and endpoint
   database.DBLogin = "admin"
   database.DBPassword = "admin123"
   database.DBName = "books"
   database.DBHost = "nuptune"
   database.DBPort = 6000

   // Domonstrate connecting using the method approach
   database.connectMethod()
   // Domonstrate connecting using the function approach
   connectFunction(database)

}

func (d Database) connectMethod() {

   fmt.Printf("connecMethod: The database connection details are: %v\n", d)
   // ToDo: connect to the database

 }

func connectFunction(d *Database) {

   fmt.Printf("connectFuntion: The database connection details are: %v\n", d)
   // ToDo: connect to the database

}</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>To explain further,  the two functions name connectMethod and connectFunction provide the same result.  If you run this code that will be evident.  The difference is that using the Receiver approach as I am in the connectMethod function means that this function is attached to that receiver. Therefore when you call the connectMethod function, you would call it like this:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">database.connectMethod()</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Looks a bit like an OO language right?... just like calling connectMethod on an object named database </p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>766</wp:post_id>
  <wp:post_date>2019-09-07 19:29:14</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Removing hanging k8s PVC's</title>
  <link>https://devopsrunbook.wordpress.com/?p=830</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=830</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>It's common to see PVC's stuck in a Terminating state. If this happens, editing the PVC with kubectl can resolve the situation. </p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>830</wp:post_id>
  <wp:post_date>2019-11-08 21:56:20</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Providing read only kubectl access on AKS</title>
  <link>https://devopsrunbook.wordpress.com/?p=852</link>
  <pubDate/>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=852</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This article describes how to provide read-only access to all namespaces of a cluster. Here we'll be looking at cluster wide access control using ClusterRole and ClsuterRoleBinding. If access control to specific namespaces is required then Roles and RoleBinding should be used.  </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pre-requisites:<br>- RBAC is enabled</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Create a cluster role</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">cat &lt;&lt;EOF | kubectl create -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: reader-role
rules:
- apiGroups:
  - ""
  - extensions
  - apps
  - batch
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
EOF</pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>852</wp:post_id>
  <wp:post_date>2020-02-16 15:15:03</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>k8s ingress (1)</title>
  <link>https://devopsrunbook.wordpress.com/2018/03/04/kubernetes-ingress-de-mysified/k8s-ingress-1/#main</link>
  <pubDate>Sat, 18 Aug 2018 08:03:56 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">http://devopsrunbook.files.wordpress.com/2018/03/k8s-ingress-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>114</wp:post_id>
  <wp:post_date>2018-08-18 08:03:56</wp:post_date>
  <wp:post_date_gmt>2018-08-18 08:03:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>k8s-ingress-1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>14</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://devopsrunbook.files.wordpress.com/2018/03/k8s-ingress-1.png</wp:attachment_url>
</item>
<item>
  <title>k8s ingress (2)</title>
  <link>https://devopsrunbook.wordpress.com/2018/03/04/kubernetes-ingress-de-mysified/k8s-ingress-2/#main</link>
  <pubDate>Sat, 18 Aug 2018 08:25:16 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">http://devopsrunbook.files.wordpress.com/2018/03/k8s-ingress-2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>126</wp:post_id>
  <wp:post_date>2018-08-18 08:25:16</wp:post_date>
  <wp:post_date_gmt>2018-08-18 08:25:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>k8s-ingress-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>14</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://devopsrunbook.files.wordpress.com/2018/03/k8s-ingress-2.png</wp:attachment_url>
</item>
<item>
  <title>Generating an RSA keypair in PEM format</title>
  <link>https://devopsrunbook.wordpress.com/2019/09/29/generating-an-rsa-keypair-in-pem-format/</link>
  <pubDate>Sun, 29 Sep 2019 11:34:45 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=772</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>By default, <strong>ssh-keygen</strong> generates a private key in PEM format  and an associated public key in some other format (not sure what this format is).  This is fine for SSH authentication however if you need a standard OpenSSL compliant keypair there are two ways to generate as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Using openssl:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Generate the private key</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:2048</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Extract the public key:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">openssl rsa -pubout -in private_key.pem -out public_key.pem</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>Using ssh-keygen</strong>:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Generate the keypair in the usual way:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">ssh-keygen -b 2048 -t rsa -f key</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Now generate a PEM version of the public key:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">ssh-keygen -f key.pub -m pem -e &gt; key.pub.pem</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>772</wp:post_id>
  <wp:post_date>2019-09-29 11:34:45</wp:post_date>
  <wp:post_date_gmt>2019-09-29 11:34:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>generating-an-rsa-keypair-in-pem-format</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="openssl"><![CDATA[openssl]]></category>
  <category domain="post_tag" nicename="pki"><![CDATA[pki]]></category>
  <category domain="post_tag" nicename="tls"><![CDATA[tls]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1569756887]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[35801552648]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>JWT Token generation and verification using PKI</title>
  <link>https://devopsrunbook.wordpress.com/2019/09/29/jwt-token-generation-and-verification-using-pki/</link>
  <pubDate>Sun, 29 Sep 2019 20:18:21 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=779</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this exercise we'll use two separate browser windows on <a href="https://jwt.io/">https://jwt.io</a>. In window1 we’ll be generating our JWT token and in window2 we’ll be verifying it.  Instead of a shared secret we'll be using asymmetric keys.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A great learning source for JWT can be found here <a href="https://www.youtube.com/watch?v=7Q17ubqLfaM&amp;t=588s">https://www.youtube.com/watch?v=7Q17ubqLfaM&amp;t=588s</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><br>Generate a private&nbsp;key&nbsp;as&nbsp;follows:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:2048</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><br>Now extract the public key </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">openssl rsa -pubout -in private_key.pem -out public_key.pem</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><br>Now carry out the following steps in window1 </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>set the header as {"alg": "RS256”, "typ": "JWT”}</li><li>set the payload as {"sub": "1234567890”, "name": "Bob Clarke”, "iat": 1516239022}</li><li>Paste the private and public keys into the relevant windows (including the BEGIN and END  markers) - NOTE, at this stage you don’t actually require the public key as we’re only generating the token and not validating it. </li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><br>This will generate the following token:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<div style="padding:3px;width:95%;word-wrap:break-word;font-size:16px;">
<font color="red">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9</font>.<font color="purple">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkJvYiBDbGFya2UiLCJpYXQiOjE1MTYyMzkwMjJ9</font>.<font color="#3185FC">An3zJCNTsAc0w1Lx8vEcBWiPOsJVOrtyFJFgHPKvn64iTvDvY9yDABjKS3MGLZtboLoT62K1LsqA0MyZA_xLTObAwMsc_agg1U49MDREtaGsmaakaRozVtysOM4P0ixCDrbhlYKfS2jL0uUgRwDVEw6AuSl3ZZHPCp1dS0FMtiEu_YFHTG4wy_qt7WO5KufvZ1ftFHLbXXjiQk7L4M2JL7iuzFRMJIlrWpsJisKtyJzdjocE0PKLqQJV8DjLYtGm_DYvSpnaGN9tf6A9KtFybEwg0d6bOMvW7fK7SE0W4YMtk32Sj3X3aXT0UW_ztbymDVd4-i8HMawfIh_2SKKFDw</font>
</div>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p><br><br>The diagram below shows how a JWT Token is&nbsp;generated:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":784,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://devopsrunbook.files.wordpress.com/2019/09/jwt-token-generation-1.jpg?w=800" alt="" class="wp-image-784" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><br>It’s&nbsp;important to note that this&nbsp;token is not secret, i.e it’s just base64 encoded and therefore anyone can take the red part&nbsp;and&nbsp;simply run it through base64 -D to decode it (example below):</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">clarkeb ~/tmp/jwt echo "eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkJvYiBDbGFya2UiLCJpYXQiOjE1MTYyMzkwMjJ9" | base64 -D ; echo 
{"sub":"1234567890","name":"Bob Clarke","iat":1516239022} </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><br>So, secrecy is not what we’re after here, what we’re after is message integrity, i.e. making sure not has not been tampered with.   To verify message integrity, carry out the following steps in window2:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>paste the token into the "Encoded" box on the left</li><li>You’ll notice that the header and payload are decoded normally (i.e, as mentioned above, secrecy is not the aim here) however you’ll also see that there’s a big red message at the bottom saying Invalid Signature (see image below):</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":811,"width":800,"height":670,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://devopsrunbook.files.wordpress.com/2019/09/image-1.png?w=800" alt="" class="wp-image-811" width="800" height="670" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><br>To verify whether the message is valid (i.e that it has not been tampered with) we need to paste in public key. The process for token verification is shown in the diagram below:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":813,"width":800,"height":629,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://devopsrunbook.files.wordpress.com/2019/09/image-2.png?w=800" alt="" class="wp-image-813" width="800" height="629" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><br>And here’s the result in window2 with the signature verified and therefore message integrity:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":815,"width":800,"height":664,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://devopsrunbook.files.wordpress.com/2019/09/image-3.png?w=800" alt="" class="wp-image-815" width="800" height="664" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>779</wp:post_id>
  <wp:post_date>2019-09-29 20:18:21</wp:post_date>
  <wp:post_date_gmt>2019-09-29 20:18:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>jwt-token-generation-and-verification-using-pki</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="jwt"><![CDATA[jwt]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[35813831206]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1569788303]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OSX Firewall CLI</title>
  <link>https://devopsrunbook.wordpress.com/2019/10/26/osx-firewall-cli/</link>
  <pubDate>Sat, 26 Oct 2019 17:08:15 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=821</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>To list:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">sudo /usr/libexec/ApplicationFirewall/socketfilterfw —listapps </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>To add an application to the firewall:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /Users/clarkeb/go/src/<a href="http://github.com/gowiki/wiki">github.com/gowiki/wiki</a> </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>To get the state of application that has been added to the firewall:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getappblocked /Users/clarkeb/go/src/<a href="http://github.com/gowiki/wiki">github.com/gowiki/wiki</a> </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>To unblock an application that has been added to the firewall:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">sudo /usr/libexec/ApplicationFirewall/socketfilterfw —unblockapp /Users/clarkeb/go/src/<a href="http://github.com/gowiki/wiki">github.com/gowiki/wiki</a></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>So, when regularly compiling a binary, run the following each time to save time:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">sudo /usr/libexec/ApplicationFirewall/socketfilterfw --remove /Users/clarkeb/go/src/<a href="http://github.com/gowiki/wiki">github.com/gowiki/wiki</a> &amp;&amp; \ 
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /Users/clarkeb/go/src/<a href="http://github.com/gowiki/wiki">github.com/gowiki/wiki</a> &amp;&amp; \ 
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblock /Users/clarkeb/go/src/<a href="http://github.com/gowiki/wiki">github.com/gowiki/wiki</a> </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>821</wp:post_id>
  <wp:post_date>2019-10-26 17:08:15</wp:post_date>
  <wp:post_date_gmt>2019-10-26 17:08:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>osx-firewall-cli</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[36762809897]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1572109695]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Run, and exec into, a kubernetes pod on the fly</title>
  <link>https://devopsrunbook.wordpress.com/2019/11/09/run-a-kubernetes-pod-on-the-fly/</link>
  <pubDate>Sat, 09 Nov 2019 21:25:37 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=833</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:preformatted -->
<pre class="wp-block-preformatted"> kubectl run -it test-pod --rm --image busybox --restart Never -n &lt;namespace&gt; -- /bin/sh</pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>833</wp:post_id>
  <wp:post_date>2019-11-09 21:25:37</wp:post_date>
  <wp:post_date_gmt>2019-11-09 21:25:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>run-a-kubernetes-pod-on-the-fly</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[37252384583]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1573334738]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Go interfaces</title>
  <link>https://devopsrunbook.wordpress.com/2019/12/29/go-interfaces/</link>
  <pubDate>Sun, 29 Dec 2019 15:09:21 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=837</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>My traditional understanding of interfaces was for Polymorphism, i.e where a object of a certain type (as determined by it’s class inheritance) could also be a different type as determined by an interface so long as it implemented the methods in that interface. The concept is similar in golang albeit more lightweight. For example, let’s say I declare two struct types called Circle and Square as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">package main

type Square struct { 
&nbsp;&nbsp; &nbsp;Length float64 
&nbsp;&nbsp; &nbsp;Width float64 
} 

type Circle struct { 
&nbsp;&nbsp; &nbsp;Radius float64 
} </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>I need a function for each of these types to calculate their area. Because calculating the area of a square is different from calculating the area of a circle these functions are specific to each type, so we’ll use receiver functions to attach an Area to each type.</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">func (c *Circle) Area() float64 { 
&nbsp;&nbsp;return math.Pi * c.Radius * c.Radius 
} 

func (s *Square) Area() float64 { 
&nbsp;&nbsp;return s.Length * s.Width 
} </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>I can call each function to calculate the area as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">func main() { 
&nbsp;&nbsp;s := &amp;Square{17, 16} 
&nbsp;&nbsp;c := &amp;Circle{15} 

&nbsp;&nbsp;fmt.Printf("The area of s is %f\n", s.Area()) 
&nbsp;&nbsp;fmt.Printf("The area of c is %f\n", c.Area()) 
} </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>So how do interfaces come into play?. Well, what if I want to add the two areas together?. The ideal solution for this would be to send an array of all shapes, iterate through them to call the Area method on each shape, add the results and return the value. The problem is, we cannot have an array (slice) containing different types. What we can do however is define an interface. This interface would be a list of methods that are common to the shapes, i.e both our Circle and Square types have a Area method, so we can define a new interface which declares this method as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">type Shape interface { 
&nbsp;&nbsp;Area() float64 
} </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With this we now have a new type called Shape. Any existing type that implements the Area() method will also be of type Shape (plus it's existing type - i.e. just like traditional Polymorphism, i.e. my existing types of Circle and Square are now also of type Shape.  Now we can build an array (slice) of Shapes and iterate through them to call the Area() function and add there areas:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">func sumAreas(shapes []Shape) float64 { 
&nbsp;&nbsp;total := 0.0 

&nbsp;&nbsp;for _, shape := range shapes { 
&nbsp;&nbsp;&nbsp;&nbsp;total += shape.Area() 
&nbsp;&nbsp;} 

&nbsp;&nbsp;return total 
} </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Now let’s update the main function as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">func main() { 
&nbsp;&nbsp;s := &amp;Square{17, 16} 
&nbsp;&nbsp;c := &amp;Circle{15} 

&nbsp;&nbsp;fmt.Printf("The area of s is %f\n", s.Area()) 
&nbsp;&nbsp;fmt.Printf("The area of c is %f\n", c.Area()) 

&nbsp; shapes := []Shape{s,c} 
&nbsp; sumOfAreas :=&nbsp;sumAreas(shapes) 
&nbsp;&nbsp;fmt.Printf(“The sum of areas is: %f\n”,&nbsp;sumOfAreas) 
} </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Here's the full code:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">package main

import (
  "fmt"
  "math"
)

type Square struct {
  Length float64
  Width  float64
}

type Circle struct {
  Radius float64
}

func (c *Circle) Area() float64 {
  return math.Pi * c.Radius * c.Radius
}

func (s *Square) Area() float64 {
  return s.Length * s.Width
}

type Shape interface {
  Area() float64
}

func sumAreas(shapes []Shape) float64 {
  total := 0.0
  for _, shape := range shapes {
    total += shape.Area()
  }
  return total
}

func main() {
  s := &amp;Square{17, 16}
  c := &amp;Circle{15}
  fmt.Printf("The area of s is %f\n", s.Area())
  fmt.Printf("The area of c is %f\n", c.Area())
  shapes := []Shape{s, c}
  sumOfAreas := sumAreas(shapes)
  fmt.Printf("The sum of areas is: %f\n", sumOfAreas)
}</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>837</wp:post_id>
  <wp:post_date>2019-12-29 15:09:21</wp:post_date>
  <wp:post_date_gmt>2019-12-29 15:09:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>go-interfaces</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="go"><![CDATA[go]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[38967679955]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1577632162]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_98dc7281787b602ecb2e4f40a99f115b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>K8s Executable ConfigMaps</title>
  <link>https://devopsrunbook.wordpress.com/2020/04/19/k8s-executable-configmaps/</link>
  <pubDate>Sun, 19 Apr 2020 15:47:17 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=858</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>To inject a script into a Pod, it's simple enough to use a config map, however if you try to chmod the script to make it executable you'll get an error telling you that the file system is read-only.  This is easily solved by using <strong>defaultMode</strong> parameter</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":862,"width":467,"height":383,"sizeSlug":"medium"} -->
<figure class="wp-block-image size-medium is-resized"><img src="https://devopsrunbook.files.wordpress.com/2020/04/image-2.png?w=300" alt="" class="wp-image-862" width="467" height="383" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here, I'm setting up a volume called pg-backup-script (which is pointing at a configMap named hadoop-ra-postgresql-backup-cm) and I'm setting it's filesystem permissions to -rwxr--r--. I'm then mounting it in the container under /tmp. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":864,"width":467,"height":285,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://devopsrunbook.files.wordpress.com/2020/04/image-3.png?w=726" alt="" class="wp-image-864" width="467" height="285" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As can be seen, the configMap data has a "key" of backup.sh, which is now executable</p>
<!-- /wp:paragraph -->

<!-- wp:block {"ref":396} /-->

<!-- wp:block {"ref":396} /-->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>858</wp:post_id>
  <wp:post_date>2020-04-19 15:47:17</wp:post_date>
  <wp:post_date_gmt>2020-04-19 15:47:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>k8s-executable-configmaps</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kubernetes"><![CDATA[kubernetes]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[43222730769]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1587311237]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>63</wp:comment_id>
    <wp:comment_author><![CDATA[vishal tewatia]]></wp:comment_author>
    <wp:comment_author_email>tewatiavishal3@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>42.109.192.66</wp:comment_author_IP>
    <wp:comment_date>2020-04-19 16:21:22</wp:comment_date>
    <wp:comment_date_gmt>2020-04-19 16:21:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Very useful info... But It made me think what if I have to inject a script using secrets?]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>131260249</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1587313283.364533;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"tewatiavishal3";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1587317084.594152;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"tewatiavishal3";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Escaping quotes in Terraform</title>
  <link>https://devopsrunbook.wordpress.com/2020/05/17/escaping-quotes-in-terraform/</link>
  <pubDate>Sun, 17 May 2020 13:33:20 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=876</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I had a slightly tricky issue recently whereby I needed to use a JQ expression as part of a local-exec.  The JQ expression needed quotes however Terraform wasn't happy with them.  It was a simple case of escaping with backslashes (see red text below)</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">resource "null_resource" "confluent-kafka-env" {
  provisioner "local-exec" {
  when = "destroy"
    command = "ccloud environment list -o json | jq '.[] | select(.name | contains(<strong><span class="has-inline-color has-vivid-red-color">\"${var.env-name}\"</span></strong>)) .id'"
  }
  provisioner "local-exec" {
    command = "ccloud environment create ${var.env-name} -o json &gt;&gt; env_id.json"
  }
}</pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>876</wp:post_id>
  <wp:post_date>2020-05-17 13:33:20</wp:post_date>
  <wp:post_date_gmt>2020-05-17 13:33:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>escaping-quotes-in-terraform</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="jq"><![CDATA[jq]]></category>
  <category domain="post_tag" nicename="terraform"><![CDATA[terraform]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[44352557969]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1589722400]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>JQ select</title>
  <link>https://devopsrunbook.wordpress.com/2020/05/17/jq-select/</link>
  <pubDate>Sun, 17 May 2020 14:54:16 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=884</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Using the following payload (in this case derived from <strong>ccloud environment list -o json</strong></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">[
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;"id": "t27422",
&nbsp;&nbsp;&nbsp;&nbsp;"name": "dev"
&nbsp;&nbsp;},
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;"id": "env-ygg7j",
&nbsp;&nbsp;&nbsp;&nbsp;"name": "spike"
&nbsp;&nbsp;}
]</pre>
<!-- /wp:preformatted -->

<!-- wp:spacer {"height":36} -->
<div style="height:36px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>ccloud environment list -o json | jq .[]</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">{
&nbsp;&nbsp;"id": "t27422",
&nbsp;&nbsp;"name": "dev"
}
{
&nbsp;&nbsp;"id": "env-ygg7j",
&nbsp;&nbsp;"name": "spike"
}</pre>
<!-- /wp:preformatted -->

<!-- wp:spacer {"height":36} -->
<div style="height:36px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>ccloud environment list -o json | jq .[].name</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">"dev"
"spike"</pre>
<!-- /wp:preformatted -->

<!-- wp:spacer {"height":36} -->
<div style="height:36px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>ccloud environment list -o json | jq -c '[ .[] | select( .name | contains("spike")) ]’</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">[{"id":"env-ygg7j","name":"spike"}]</pre>
<!-- /wp:preformatted -->

<!-- wp:spacer {"height":36} -->
<div style="height:36px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>ccloud environment list -o json | jq '.[] | select(.name | contains("spike")) .id’</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">"env-ygg7j"</pre>
<!-- /wp:preformatted -->

<!-- wp:spacer {"height":36} -->
<div style="height:36px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>Get rid of quotes with -r  </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>ccloud environment list -o json | jq -r '.[] | select(.name | contains("spike")) .id’</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">env-ygg7j</pre>
<!-- /wp:preformatted -->

<!-- wp:spacer {"height":36} -->
<div style="height:36px;" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>The above can also be written as follows if you’re having bother with jq and a message similar to Cannot index boolean with string “id"</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">ccloud environment list -o json | jq -r '.[] | select(.name | contains ("spike")) | .id'</pre>
<!-- /wp:preformatted -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>884</wp:post_id>
  <wp:post_date>2020-05-17 14:54:16</wp:post_date>
  <wp:post_date_gmt>2020-05-17 14:54:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>jq-select</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[44354919854]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1589727257]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>AKS imagePull authentication to Azure Container Registry</title>
  <link>https://devopsrunbook.wordpress.com/2020/06/26/aks-imagepull-authentication-to-azure-container-registry/</link>
  <pubDate>Fri, 26 Jun 2020 16:28:06 +0000</pubDate>
  <dc:creator>bobmclarke915800472</dc:creator>
  <guid isPermaLink="false">https://devopsrunbook.wordpress.com/?p=897</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A pod running in an AKS cluster and trying to pull an image from ACR needs Reader writes on that ACR.  The simplest way to do this is give the AKS cluster service principal Reader access on the ACR </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, get the ID of the AKS cluster service principal (note, when you create an AKS cluster an SP is automatically generated):</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">AKS_SP_ID=$(az aks show --resource-group &lt;your aks resource group&gt; --name &lt;your aks cluster name&gt; --query "servicePrincipalProfile.clientId" --output tsv --subscription &lt;your aks subscription id&gt;)</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Now get the ID of your Azure Container Registry:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">ACR_ID=$(az acr show --name &lt;your acr name&gt; --resource-group &lt;your acr resource group&gt; --query "id" --output tsv --subscription &lt;your acr subscription id&gt;)

Now grant your AKS cluster SP Reader rights on your ACR:
</pre>
<!-- /wp:preformatted -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">az role assignment create --assignee $AKS_SP_ID --role Reader --scope $ACR_ID --subscription &lt;your acr subscription id&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>NOTE:  Trying to pull a non existent tag can result in an authentication error (e.g. myreg.azurecr.io/docker-camunda:latest as opposed to myreg.azurecr.io/docker-camunda:myreg.azurecr.io/docker-camunda:0.0.10)</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>897</wp:post_id>
  <wp:post_date>2020-06-26 16:28:06</wp:post_date>
  <wp:post_date_gmt>2020-06-26 16:28:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>aks-imagepull-authentication-to-azure-container-registry</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1593188888]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[45890023845]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
