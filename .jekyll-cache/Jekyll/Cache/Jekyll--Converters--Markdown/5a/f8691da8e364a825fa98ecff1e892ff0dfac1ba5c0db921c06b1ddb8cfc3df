I"Æ
<p>Letâ€™s say Iâ€™m contributing to Github projects at work and Iâ€™m also contributing to Github projects that are not work related. In all likelyhood Iâ€™ll do this using different Github accounts, however I may be working on the same machine for both work and personal projects for convenience. With this in mind, I need a way for my git cli to automatically detect which SSH key to use depending on the project.</p>

<p>For the pusposes of this example weâ€™ll use the following fake Github projects</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://github.com/my-work-org/my-work-project
https://github.com/my-personal-org/my-perosnal-project
</code></pre></div></div>

<p>For these projects, Iâ€™m using 2 different SSH keys, one for each project</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Users/clarkeb/.ssh/id_rsa_work.pub
/Users/clarkeb/.ssh/id_rsa_perosnal.pub
</code></pre></div></div>

<p>To ensure that my git cli uses the right key, I have to do two thingsâ€¦</p>

<p>First, I setup mhy  ~/.ssh/config like this:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Host github.com-work
  HostName github.com
  IdentityFile ~/.ssh/id_rsa_work
  IdentitiesOnly yes
    StrictHostKeyChecking=no
    UserKnownHostsFile=/dev/null

Host github.com-personal
  HostName github.com
  IdentityFile ~/.ssh/id_rsa_personal
  IdentitiesOnly yes
    StrictHostKeyChecking=no
    UserKnownHostsFile=/dev/null
</code></pre></div></div>
<p>This basically saysâ€¦ for git remotes with a host alias of This basically saysâ€¦</p>
<ul>
  <li>for git remotes with a host alias of github.com-work, the git cli should use the ~/.ssh/id_rsa_work SSH private key</li>
  <li>for git remotes with a host alias of github.com-personal, the git cli should use the ~/.ssh/id_rsa_personal SSH private key</li>
</ul>

<p>So whatâ€™s a git remote alias?â€¦ You can find this out by running <strong>git remote -v</strong> in any local git directory. For example</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote -v
origin  git@github.com-personal:bobclarke/bobclarke.github.io.git (fetch)
origin  git@github.com-perosnal:bobclarke/bobclarke.github.io.git (push)

</code></pre></div></div>

<p>This (for me) was a bit confusing at first because the <strong>github.com-personal</strong> part wasnâ€™t a proper hostname. Then I relaised it didnâ€™t need to be, it just needed to match the <strong>Host</strong> field in ~/.ssh/config, where it is matched to the actuall Github hostname with the <strong>HostName</strong> field.</p>

:ET